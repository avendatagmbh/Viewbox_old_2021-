@model Viewbox.Models.ClickAndClickForDynamicModel
@using System.Globalization
@using SystemDb
@using Viewbox.Properties
@using Viewbox

@helper PrintParameterRow(IParameter param, IParameter param2 = null) {
    <tr>
        <td></td>
        <td class="report-parameter-error hide">Blah blah</td>
        <td></td>
        @if(param2 != null) {
            <td class="report-parameter-error hide">Blah blah</td>
        }
        else {
            <td></td>
        }
    </tr>
    <tr class="parameter">
        @PrintParameter(param)
        @if(param2 != null) {
            <text>@PrintParameter(param2, true)</text>
        }
    </tr>
}

@helper PrintParameter(IParameter param, bool onlyInput = false)
    {

    <!-- _ShowOneTableObjectOverviewPartial.cshtml PrintParameter -->
    var requiredStyle = param.IsRequired > 0 ? ";border: 1px solid red;" : "";
    var emptyValueListStyle = param.IndexErrorStyleString;

    bool matchedParameter = Model.CnCParameter.Keys.Contains(param.Id);
    
        bool disabled =
            (param.DataType != SqlType.Boolean && param.DataType != SqlType.Date && param.Values == null &&
            !String.IsNullOrEmpty(param.ColumnName) && !String.IsNullOrEmpty(param.TableName) && !param.HasIndexData && param.IndexDataGenerated)
            || (param.DataType == SqlType.Date && (param.Values == null || param.UserDefined) && !String.IsNullOrEmpty(param.ColumnName) &&
            !String.IsNullOrEmpty(param.TableName) && !param.HasIndexData && param.IndexDataGenerated);
    <!--<tr class="parameter">-->
        //if (!onlyInput)
        //{
        <td>
            @{
                string paramDescription = param.GetDescription();
                if (paramDescription.Trim().EndsWith("="))
                {
                    paramDescription = paramDescription.Substring(0, paramDescription.Trim().Length - 1);
                }
                if (!paramDescription.Trim().EndsWith(":"))
                {
                    paramDescription = paramDescription.Trim() + ":";
                }
                    if (onlyInput)
                    {
                        paramDescription = Resources.To + ":";
                    }

                    <span class="@(disabled || matchedParameter ? "disabled-parameter" : "")">@paramDescription</span>

            }
        </td>
        //}
        if (param.DataType == SqlType.Date)
        {
            var date = string.Empty;
            var opt = ViewboxSession.Optimizations.LastOrDefault();
            var old_year = DateTime.Now.Year;
            var year = DateTime.Now.Year;
            if (opt != null)
            {
                var value = opt.GetOptimizationValue(OptimizationType.SortColumn);
                if (value != null && !String.IsNullOrWhiteSpace(value)) { int.TryParse(value, out year); }
            }
            string defaultDate = "";
            if (param.Default != null)
            {
                DateTime defaultDateTime;
                DateTime.TryParseExact(param.Default, "yyyyMMddHHmmss", new CultureInfo(ViewboxSession.Language.CountryCode), DateTimeStyles.None, out defaultDateTime);
                defaultDate = defaultDateTime.ToShortDateString();
            }
            date = date.Replace(old_year.ToString(), year.ToString());
            string dateValue = "";
            if (param.Default == null)
            {
                dateValue = date;
            }
            else if (param.Default != "")
            {
                dateValue = defaultDate;
            }
            <td class="parameter-item">
                @Html.Hidden("itemId", param.Id)
                <div class="item-id">@(param.Id)</div>
                <div class="report-parameter-error hide" style="width: 345px;"></div>
                @{
            dateValue = (param.HistoryValues != null && param.HistoryValues.Count > 0 ? param.HistoryValues.First().Value : dateValue);
            if (string.IsNullOrEmpty(dateValue))
            {
                <input id="TextBoxName@(param.Id)" name="param" type="text" style="text-align: left@(requiredStyle)@(emptyValueListStyle)" @(disabled ? "disabled" : "") class="text field @(disabled ? "" : "reportdate")  report-parameter-validate dropdown value placeholder" value="" placeholder="" />
            }
            else
            {
                <input id="TextBoxName@(param.Id)" name="param" type="text" style="text-align: left@(requiredStyle)@(emptyValueListStyle)" @(disabled ? "disabled" : "") class="text field @(disabled ? "" : "reportdate")  report-parameter-validate dropdown value placeholder" value="@(disabled ? "" : dateValue)" placeholder="" />
            }
            if (disabled)
            {
                <input name="param" type="hidden" />
            }
                }
                @if (param.Values != null && !param.UserDefined)
                {
                    <div class="dropdown-menu-container">
                        <div class="dropdown-menu" @if (param.Values.ElementAt(0).Value != param.Values.ElementAt(0).GetDescription()) { <text> style="width:450px;" </text>   }>
                            @foreach (var v in param.Values)
                            {
                                <div class="entry gray-on-mouseover">
                                    @if (v.Value != v.GetDescription())
                                    {
                                        <div class="value">@v.Value</div>
                                        <div class="description">@v.GetDescription()</div>
                                    }
                                    else
                                    {
                                        <div class="value-only">@v.Value</div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    if (!String.IsNullOrEmpty(param.ColumnName) && !String.IsNullOrEmpty(param.TableName))
                    {
                        if (param.HasIndexData)
                        {
                            <img id="AdditionButton@(param.Id)" class="AdditionButton select-distinct@(param.HasIndexData ? "" : "-inactive")" src="/Content/img/buttons/plus.png" style="position: relative; left: -60px; " alt="..." title="..." data-id=@param.Id parameterid=@param.Id />

                            <img id="DeleteImage@(param.Id)" class="DeleteText" src="/Content/img/buttons/delete.png" style="position: relative; left: -20px; " data-id=@param.Id />
                        }
                        else
                        {
                            <img id="DeleteImage@(param.Id)" class="DeleteText" src="/Content/img/buttons/delete.png" style="position: relative;" data-id=@param.Id />
                        }
                    }
                    else
                    {
                        <img id="DeleteImage@(param.Id)" class="DeleteText" src="/Content/img/buttons/delete.png" style="position: relative; " data-id=@param.Id />
                    }
                    if (param.HistoryValues != null && param.HistoryValues.Count > 0)
                    {
                        int historyCount = 0;
                        <div class="dropdown-menu-container" style="z-index: 400">
                            <div class="dropdown-menu scrollauto" style="height: 100px">
                                @foreach (var v in param.HistoryValues)
                                {
                                    if (!String.IsNullOrEmpty(v.Value))
                                    {
                                        <div class="entry gray-on-mouseover">
                                            <div class="value-only" style="text-align: left">@v.Value</div>
                                        </div>
                                        historyCount++;
                                    }
                                    if (historyCount > 3)
                                    {
                                        break;
                                    }
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="dropdown-menu-container" style="z-index: 400">
                            <div class="dropdown-menu scrollauto" style="height: 100px">
                                <div class="entry gray-on-mouseover">
                                    <div class="value-only" style="text-align: left"></div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </td>
            if (!true)
            {
                <td class="report-parameter-error hide"></td>
        }
        }
        else if (param.Values != null && param.Values.Any() && !param.UserDefined)
        {
            <td class="parameter-item">
                @Html.Hidden("itemId", param.Id)
                <div class="item-id">@(param.Id)</div>
                <div class="report-parameter-error hide" style="width: 345px;"></div>
                @{
            string defaultValue = (param.HistoryValues != null && param.HistoryValues.Count > 0 ? param.HistoryValues.First().Value : param.Default);
            if (string.IsNullOrEmpty(param.Default))
            {
                <input name="param" type="text" @(disabled ? "disabled" : "") class="text field report-parameter-validate dropdown value placeholder" value="" placeholder="" />
            }
            else
            {
                <input name="param" type="text" @(disabled ? "disabled" : "") class="text field report-parameter-validate dropdown value placeholder" value="@defaultValue" readonly placeholder="" />
            }
            if (disabled)
            {
                <input name="param" type="hidden" />
            }
                }
                <div class="dropdown-menu-container">
                    <div class="dropdown-menu scrollauto" @if (param.Values.ElementAt(0).Value != param.Values.ElementAt(0).GetDescription()) { <text> style="width:450px;" </text>  }>
                        @foreach (var v in param.Values)
                        {
                            <div class="entry gray-on-mouseover">
                                @if (v.Value != v.GetDescription())
                                {
                                    <div class="value">@v.Value</div>
                                    <div class="description">@v.GetDescription()</div>
                                }
                                else
                                {
                                    <div class="value-only">@v.Value</div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </td>
            if (!true)
            {
                <td class="report-parameter-error hide"></td>
        }
        }
        else if (param.DataType == SqlType.Boolean)
        {
            <td>
                @Html.Hidden("itemId", param.Id)
                <div class="item-id">@(param.Id)</div>
                <div class="report-parameter-error hide" style="width: 345px;"></div>
                <input type="hidden" value="@(param.Default == null || param.Default.ToLower() == "true" ? "true" : "false")" name="param" />
                <input type="checkbox" class="boolean field" @(param.Default == null || param.Default.ToLower() == "true" ? "checked='checked'" : "") />
            </td>
            if (!true)
            {
                <td class="report-parameter-error hide"></td>
            }
        }
        else if (param.Values == null)
        {
            <td class="parameter-item">
                @Html.Hidden("itemId", param.Id)
                <div class="item-id">@(param.Id)</div>
                <div class="report-parameter-error hide" style="width: 345px;"></div>
                @{
            string defaultValue = (param.HistoryValues != null && param.HistoryValues.Count > 0 ? param.HistoryValues.First().Value : param.Default);
            if (string.IsNullOrEmpty(defaultValue) || matchedParameter)
            {
                string value = string.Empty;
                Model.CnCParameter.TryGetValue(param.Id, out value);
                
                <input id="TextBoxName@(param.Id)" name="param" type="text" @(matchedParameter?"disabled":"") class="report-parameter-validate text field dropdown @((param.DataType == SqlType.Numeric || param.DataType == SqlType.Decimal || param.DataType == SqlType.Integer) && param.TypeModifier == 0 ? "thousand-separator" : "") value placeholder" style="text-align: left@(requiredStyle)@(emptyValueListStyle)" value="@value" placeholder=" " />
                if (matchedParameter)
                {
                    <input name="param" type="hidden" value="@value" />
                }
            }
            else
            {
                <input id="TextBoxName@(param.Id)" name="param" type="text" @(disabled ? "disabled" : "") class="report-parameter-validate text field dropdown @((param.DataType == SqlType.Numeric || param.DataType == SqlType.Decimal || param.DataType == SqlType.Integer) && param.TypeModifier == 0 ? "thousand-separator" : "") value placeholder" style="text-align: left@(requiredStyle)@(emptyValueListStyle)" value="@(disabled ? "" : defaultValue)" placeholder="" />
            }
            if (disabled)
            {
                <input name="param" type="hidden" />
            }
                }
                @if (!String.IsNullOrEmpty(param.ColumnName) && !String.IsNullOrEmpty(param.TableName))
                {
                    if (param.HasIndexData)
                    {
                        <img id="AdditionButton@(param.Id)" class="AdditionButton select-distinct@(param.HasIndexData && !matchedParameter ? "" : "-inactive")" src="/Content/img/buttons/plus.png" style="position: relative; left: -40px; " alt="..." title="..." data-id=@param.Id parameterid=@param.Id />

                        <img id="DeleteImage@(param.Id)" class="DeleteText@(matchedParameter ? "-inactive" : "")" src="/Content/img/buttons/delete.png" style="position: relative; left: -20px; " data-id=@param.Id />

                    }
                    else
                    {
                        <img id="DeleteImage@(param.Id)" class="DeleteText@(matchedParameter ? "-inactive" : "")" src="/Content/img/buttons/delete.png" style="position: relative; " data-id=@param.Id />
                    }
                }
                else
                {
                    <img id="DeleteImage@(param.Id)" class="DeleteText" src="/Content/img/buttons/delete.png" style="position: relative; " data-id=@param.Id />
                }
                @if (param.HistoryValues != null && param.HistoryValues.Count > 0)
                {
                    int historyCount = 0;
                    <div class="dropdown-menu-container" style="z-index:400">
                        <div class="dropdown-menu scrollauto" style=" height:100px">
                            @foreach (var v in param.HistoryValues)
                            {
                                if (!String.IsNullOrEmpty(v.Value))
                                {
                                    <div class="entry gray-on-mouseover">
                                        <div class="value-only" style="text-align: left">@v.Value</div>
                                    </div>
                                    historyCount++;
                                }
                                if (historyCount > 3)
                                {
                                    break;
                                }
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="dropdown-menu-container" style="z-index: 400">
                        <div class="dropdown-menu scrollauto" style="height: 100px">
                            <div class="entry gray-on-mouseover">
                                <div class="value-only" style="text-align: left"></div>
                            </div>
                        </div>
                    </div>
                }
            </td>
            if (!true)
            {
                <td class="report-parameter-error hide"></td>
        }
        }
        else
        {
            <td class="parameter-item">
                @Html.Hidden("itemId", param.Id)
                <div class="item-id">@(param.Id)</div>
                <div class="report-parameter-error hide" style="width: 345px;"></div>
                @if (string.IsNullOrEmpty(param.Default))
                {
                    <input name="param" type="text" @(disabled ? "disabled" : "") class="report-parameter-validate text field @((param.DataType == SqlType.Numeric || param.DataType == SqlType.Decimal || param.DataType == SqlType.Integer) && param.TypeModifier == 0 ? "thousand-separator" : "") value placeholder" value="" placeholder="" />
                }
                else
                {
                    <input name="param" type="text" @(disabled ? "disabled" : "") class="report-parameter-validate text field @((param.DataType == SqlType.Numeric || param.DataType == SqlType.Decimal || param.DataType == SqlType.Integer) && param.TypeModifier == 0 ? "thousand-separator" : "") value placeholder" value="@param.Default" placeholder="" />
                }
                @if (disabled)
                {
                    <input name="param" type="hidden" />
                }
            </td>
            if (!true)
            {
                <td class="report-parameter-error hide"></td>
            }
        }
}

@using (Html.BeginForm("ExecuteIssueForClickAndClick", "Datagrid", new { id = Model.Issue.Id }, FormMethod.Post, new { id = "execute_report" }))
{
    @Html.AntiForgeryToken()
    <fieldset>
        <div class="onereportparamset scrollauto dynamic-c-and-c">
            <table class="parameter-table">
                @foreach (IParameter parameter in Model.Issue.Parameters)
                {
                    <text>@PrintParameterRow(parameter)</text>                    
                }
                @foreach (var cid in  Model.TargerColumnId)
                {
                    @Html.Hidden("columnId", cid)
                }
                @foreach (var cp in Model.CnCParameter.Values)
                {
                    @Html.Hidden("filterValue", cp)
                }
                @Html.Hidden("cancelBtn", @Resources.Cancel, new { @class="button", id="cancelBtn" })
                @Html.Hidden("openBtn", @Resources.OpenReport, new { @class = "button", id = "openBtn" })
            </table>
        </div>        
    </fieldset>
}
