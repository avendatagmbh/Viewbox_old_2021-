@using Microsoft.Ajax.Utilities
@using Viewbox
@using Viewbox.Properties
@model Viewbox.Models.DataGridModel
@{
    if (Model != null)
    {
        var table = Model.TableObject;
        if (table != null)
        {
            <ul class="dropdown big view multiOptimization" id="subtotaloptions">
                <li class="panel">
                    @Html.Partial("_TooltipPartial", Resources.MultipleOptimization)
                    <a id="multipleOptimizationIcon" class="icon process right dropdown-btn" style="@(table.MultiOptimization ? "border: 1px solid orange; border-radius: 4px;" : "")"></a>
                    <ul class="dropdown-menu">
                        <li class="column-view-props visible">
                            <div class="box">
                                <div class="top">
                                    <h4>@Resources.MultipleOptimization</h4>
                                    <div class="close-popup" style="right: 20px; top: 32px;"></div>
                                </div>
                                <div class="middle multipleOptimization" style="height: @(table.MultiOptimization ? "50%" : "5%")">
                                    <div class="activate-icon">
                                        @using (Html.BeginForm("ActivateMultipleOptimization", "DataGrid", new { id = Model.TableInfo.Id }))
                                        {
                                            @Html.Label(Resources.ActivateMultipleOptimization)
                                            @Html.CheckBox("multiOptimization", table.MultiOptimization, new { @style = "vertical-align: middle;" })
                                        }
                                    </div>
                                    @if (table.MultiOptimization)
                                    {
                                        <div class="container">
                                            @using (Html.BeginForm("MultipleOptimizationLimits", "DataGrid", new { id = Model.TableInfo.Id }))
                                            {
                                                @Html.Hidden("multiOptimization", table.MultiOptimization)
                                                bool hideEmptyOptimization = false;
                                                bool.TryParse(System.Web.Configuration.WebConfigurationManager.AppSettings["HideEmptyOptimization"], out hideEmptyOptimization);
                                                <div class="lefty">
                                                    <h3>@Resources.From</h3>
                                                    @foreach (var opt in ViewboxSession.Optimizations)
                                                    {
                                                        if (opt.Level > 1)
                                                        {
                                                            var optcount = opt.Parent.Children.Count(c => ViewboxRightsExtensions.IsAllowed(c));
                                                            if (optcount == 0 || (hideEmptyOptimization && optcount < 2))
                                                            {
                                                                continue;
                                                            }
                                                            var lastOptItem = table.OptimizationSelected != null ? ViewboxSession.AllowedOptimizations.First(t => t.Id == table.OptimizationSelected[opt.Level-1].Item1) : null;
                                                            var list = lastOptItem != null ? lastOptItem.Parent.Children.OrderBy((o) => o.Value) : opt.Parent.Children.OrderBy((o) => o.Value);
                                                            var listElements = new List<SelectListItem>();
                                                            foreach (var item in list)
                                                            {
                                                                if (item.Value != null)
                                                                {
                                                                    listElements.Add(new SelectListItem()
                                                                    {
                                                                        Text = opt.Level != 4 ? item.Value + " - " + item.GetDescription() : item.GetDescription(),
                                                                        Value = item.Id.ToString(),
                                                                        Selected = (table.OptimizationSelected != null && 
                                                                            table.OptimizationSelected.Any(o => o.Value.Item1 == item.Id)) || 
                                                                            (table.OptimizationSelected == null && item.Id == opt.Id)
                                                                    });
                                                                } 
                                                            }
                                                            if (table.OptimizationSelected == null && opt.Value.IsNullOrWhiteSpace())
                                                            {
                                                                listElements.First().Selected = true;
                                                            }
                                                            <div id="select_@opt.Level">
                                                                @Html.Label(opt.Group.GetName(), new { @class = "optimizationName" })
                                                                @Html.DropDownList("optimizationFrom", listElements)
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                                <div class="rigthy">
                                                    <h3>@Resources.To</h3>
                                                    @foreach (var opt in ViewboxSession.Optimizations)
                                                    {
                                                        if (opt.Level > 1)
                                                        {
                                                            var optcount = opt.Parent.Children.Count(c => ViewboxRightsExtensions.IsAllowed(c));
                                                            if (optcount == 0 || (hideEmptyOptimization && optcount < 2))
                                                            {
                                                                continue;
                                                            }
                                                            var lastOptItem = table.OptimizationSelected != null ? ViewboxSession.AllowedOptimizations.First(t => t.Id == table.OptimizationSelected[opt.Level - 1].Item2) : null;
                                                            var list = lastOptItem != null ? lastOptItem.Parent.Children.OrderBy((o) => o.Value) : opt.Parent.Children.OrderBy((o) => o.Value);
                                                            var listElements = new List<SelectListItem>();
                                                            foreach (var item in list)
                                                            {
                                                                if (item.Value != null)
                                                                {
                                                                    listElements.Add(new SelectListItem()
                                                                    {
                                                                        Text = opt.Level != 4 ? item.Value + " - " + item.GetDescription() : item.GetDescription(),
                                                                        Value = item.Id.ToString(),
                                                                        Selected = (table.OptimizationSelected != null &&
                                                                            table.OptimizationSelected.Any(o => o.Value.Item2 == item.Id)) ||
                                                                            (table.OptimizationSelected == null && item.Id == opt.Id)
                                                                    });
                                                                }                                                                
                                                            }
                                                            if (table.OptimizationSelected == null && opt.Value.IsNullOrWhiteSpace())
                                                            {
                                                                listElements.Last().Selected = true;
                                                            }
                                                            <div id="select_@opt.Level">
                                                                @Html.Label(opt.Group.GetName(), new { @class = "optimizationName" })
                                                                @Html.DropDownList("optimizationTo", listElements)
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                                <div class="buttons">
                                                    <input class="button" type="submit" value="@Resources.Submit" />
                                                </div>
                                            }
                                        </div>
                                        <script>
                                            $(document).ready(function () {
                                                $('.slide .btn-slide ').off("click");
                                            });
                                        </script>
                                    }
                                </div>
                                <div class="bottom"></div>
                            </div>
                        </li>
                    </ul>
                </li>
            </ul>
        }
        else
        {
            <ul class="dropdown big view multiOptimization" id="subtotaloptions">
                <li class="panel">
                    @Html.Partial("_TooltipPartial", Resources.MultipleOptimization)
                    <a id="multipleOptimizationIcon" class="icon process right dropdown-btn"></a>
                    <ul class="dropdown-menu">
                        <li class="column-view-props visible">
                            <div class="box">
                                <div class="top">
                                    <h4>@Resources.MultipleOptimization</h4>
                                    <div class="close-popup" style="right: 20px; top: 32px;"></div>
                                </div>
                                <div class="middle multipleOptimization" style="height: 5%">
                                    <div class="activate-icon">
                                        @using (Html.BeginForm("ActivateMultipleOptimization", "DataGrid", new { id = Model.TableInfo.Id }))
                                        {
                                            @Html.Label(Resources.ActivateMultipleOptimization)
                                            @Html.CheckBox("multiOptimization", false, new { @style = "vertical-align: middle;" })
                                        }
                                    </div>                                    
                                </div>
                                <div class="bottom"></div>
                            </div>
                        </li>
                    </ul>
                </li>
            </ul>
        }
    }
}