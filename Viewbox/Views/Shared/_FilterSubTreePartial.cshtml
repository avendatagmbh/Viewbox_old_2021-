@using Viewbox
@using Viewbox.Models
@using Viewbox.Properties
@using ViewboxDb.Filters
@model Viewbox.Models.FilterModel
@{
    Dictionary<Operator, Dictionary<string, string>> commandDictionary = new Dictionary<Operator, Dictionary<string, string>>
                                                                             {
                                                                                 {Operator.And, new Dictionary<string, string> {{"Symbol", "∧"}, {"TooltipText", Resources.AndFilter}, {"OpCommand", "And("}, {"OpText1", Resources.And}, {"Text", "Alle Bedingungen müssen erfüllt sein"}}},
                                                                                 {Operator.Or, new Dictionary<string, string> {{"Symbol", "∨"}, {"TooltipText", Resources.OrFilter}, {"OpCommand", "Or("}, {"OpText1", Resources.Or}, {"Text", "Eine der Bedingungen muss erfüllt sein"}}},
                                                                                 {Operator.Greater, new Dictionary<string, string> {{"Symbol", ">"}, {"TooltipText", Resources.GreaterFilter}, {"OpCommand", "Greater("},}},
                                                                                 {Operator.GreaterOrEqual, new Dictionary<string, string> {{"Symbol", "≥"}, {"TooltipText", Resources.GreaterOrEqualFilter}, {"OpCommand", "GreaterOrEqual("},}},
                                                                                 {Operator.Less, new Dictionary<string, string> {{"Symbol", "<"}, {"TooltipText", Resources.LessFilter}, {"OpCommand", "Less("},}},
                                                                                 {Operator.LessOrEqual, new Dictionary<string, string> {{"Symbol", "≤"}, {"TooltipText", Resources.LessOrEqualFilter}, {"OpCommand", "LessOrEqual("},}},
                                                                                 {Operator.Equals, new Dictionary<string, string> {{"Symbol", "="}, {"TooltipText", Resources.EqualFilter}, {"OpCommand", "Equal("},}},
                                                                                 {Operator.Like, new Dictionary<string, string> {{"Symbol", "≈"}, {"TooltipText", Resources.LikeFilter}, {"OpCommand", "Like("},}},
                                                                                 {Operator.In, new Dictionary<string, string> {{"Symbol", "ELEMENT"}, {"TooltipText", Resources.InFilter}, {"OpCommand", "In("},}},
                                                                                 {Operator.NotEquals, new Dictionary<string, string> {{"Symbol", "≠"}, {"TooltipText", Resources.NotEqualFilter}, {"OpCommand", "NotEqual("},}},
                                                                                 {Operator.StartsWith, new Dictionary<string, string> {{"Symbol", "=|"}, {"TooltipText", Resources.StartsWithFilter}, {"OpCommand", "StartsWith("}, {"OpText1", "StartsWith("},}}
                                                                             };
    Operator op;
    if (Model.UseOpToDisplay)
    {
        op = Model.OpToDisplay;
    }
    else
    {
        op = Model.Filter.Operator();
    }
}
<!-- _FilterSubTreePartial.cshtml -->
@switch (op)
{
    case Operator.Or:
    case Operator.And:
        {
            Dictionary<string, string> text = commandDictionary[op];
            var filter = Model.Filter as BinaryFilter;

            <div class="operator">
                <span class="op-command">@text["OpCommand"]</span>
                <div class="op-number-box" style="display: inline-block;">@Model.Number</div>
                <div style="display: inline-block;" class="op-dock">
                    <select class="and_or_select" style="display: inline-block; width: 60px">
                        @if (filter is AndFilter)
                        {
                            <option value="And(" selected>@Resources.AndFilterString</option>
                            <option value="Or(">@Resources.OrFilterString</option>
                        }
                        else
                        {
                            <option value="And(">@Resources.AndFilterString</option>
                            <option value="Or(" selected>@Resources.OrFilterString</option>
                        }
                    </select>
                    <span>
                        @if (filter is AndFilter)
                        {<text>@Resources.AndFilterText</text>
                        }
                        else
                        {<text>@Resources.OrFilterText</text>
                        }
                    </span>
                </div>
                @if (Model.ParentFilterModel != null)
                {
                    <div class="delete">x</div>
                }
                <ul style="position: relative; right: 0;">
                    @if (filter != null)
                    {
                        foreach (var f in filter.Conditions)
                        {
                            if (f != null)
                            {
                                <li>
                                    @Html.Partial("_FilterSubTreePartial", FilterModelFactory.GetFilterModel(f, Model))
                                </li>
                                <span class="op-command">,</span>
                            }
                        }
                    }
                    <li class="placeholder_new_condition filter-tree-li"><div class="op-dock optional drop-condition">@Resources.AddNewFilterCondition</div></li>
                </ul>
                <span class="op-command">)</span>
            </div>
        }
        break;
    case Operator.NotEquals:
    case Operator.Like:
    case Operator.Equals:
    case Operator.Less:
    case Operator.LessOrEqual:
    case Operator.GreaterOrEqual:
    case Operator.StartsWith:
    case Operator.Greater:
        {
            Dictionary<string, string> textDict = commandDictionary[op];
            var filter = Model.Filter as ColValueFilter;
            var colId = String.Format("%{0}", filter != null && filter.Column != null ? filter.Column.Id.ToString() : String.Empty);
            var colName = filter != null && filter.Column != null ? filter.Column.GetDescription() : Resources.SelectColumn;
            colName = colName ?? "";
            
            var value = filter != null && !string.IsNullOrEmpty(filter.Value.ToString()) ? ViewboxSession.FilterValueToString(filter.Column, filter.Value) : String.Empty;
            var text = filter != null && !string.IsNullOrEmpty(filter.Value.ToString()) ? ViewboxSession.FilterValueToString(filter.Column, filter.Value) : Resources.EnterValue;
            /* value modification */
            text = text.Replace("\\%", "%");
            if (op == Operator.Like && text.Length >= 2)
            {
                if (text[0] == '%' && text.Last() == '%')
                {
                    text = text.Remove(text.Length - 1);
                    text = text.Substring(1, text.Length - 1);
                }
                if (!value.IsEmpty())
                {
                    if (value[0] != '%')
                    {
                        value = "%" + value;
                    }
                    if (value.Last() != '%')
                    {
                        value += "%";
                    }
                }
            }
            else
            {
                if (text.Count(c => c == '.') == 1)
                {
                    double outNumber = 0.0f;
                    if (double.TryParse(text, out outNumber) && Culture.ToLower().Contains("de"))
                    {
                        text = text.Replace(".", ",");
                    }
                }
            }
            text = text.Replace(@"\", "");
            var nullable = (op == Operator.NotEquals || op == Operator.Equals || op == Operator.Less || op == Operator.LessOrEqual || op == Operator.Greater || op == Operator.GreaterOrEqual ? "nullable" : "");
            <div class="operator value @nullable">
                <div class="op-number-box">@Model.Number</div>
                <span class="op-command">@textDict["OpCommand"]</span>
                <div class="op-dock column">
                    <span class="op-command column">@colId</span>
                    <div class="dropdown placeholder border" placeholder="@Resources.SelectColumn">@colName</div>
                </div>
                <div class="op-symbol" style="display: inline-block">@textDict["Symbol"]</div>
                <span class="op-dock value">
                    <span class="op-command">,"</span>
                    <span class="op-command value">@value</span>
                    @*<span><input type="text" value="@text" placeholder="@Resources.EnterValue" class="text placeholder border" /></span>*@
                    <span><textarea type="text"  placeholder="@Resources.EnterValue" class="text placeholder border" style="resize: none; overflow: hidden">@text</textarea></span>
                    <span class="op-command">"</span>
                </span>
                <span class="op-command">)</span>
                <div class="delete">x</div>
            </div>
        }
        break;
    case Operator.In:
        {
            Dictionary<string, string> textDict = commandDictionary[op];
            var Filter = Model.Filter as ColSetFilter;
            var ColName = Filter != null && Filter.Column != null ? Filter.Column.GetDescription() : Resources.SelectColumn;
            ColName = ColName ?? "";
            
            var colId = String.Format("%{0}", Filter != null && Filter.Column != null ? Filter.Column.Id.ToString() : String.Empty);
            <span class="operator op_in typeless n-ary">
                <div class="op-number-box">@Model.Number</div>
                <span class="op-command">@textDict["OpCommand"]</span>
                <span class="op-dock column">
                    <span class="op-command column">@colId</span>
                    <div class="dropdown placeholder border" placeholder="@Resources.SelectColumn">@ColName</div>
                </span>
                <div class="op-symbol" style="display: inline-block">&isin;</div>

                <br />
                <div class="op-symbol left-tabulated" style="display: inline-block">{</div>

                @foreach (var Value in Filter.Values)
                {
                    <span class="op-dock value in-filter-template ">
                        <br />
                        <span class="op-command">,"</span>
                        <span class="op-command value">@Value</span>
                        <span><input type="text" value="@Value.ToString()" placeholder="@Resources.EnterValue" class="text placeholder border in-filter-element" /></span>
                        <span class="op-command">"</span>
                        <span class="delete_element">x</span>
                        <span style="display: inline-block">,</span>
                    </span>
                }


                <span class="op-command">)</span>
                <div class="add-new-element-for-IN-filter ">@Resources.Add</div>
                <br />
                <div class="op-symbol left-tabulated" style="display: inline-block">}</div>
                <div class="delete">x</div>
            </span>
        }
        break;
    case Operator.Between:
        {
            var Filter = Model.Filter as BetweenFilter;
            var ColId = String.Format("%{0}", Filter != null && Filter.Column != null ? Filter.Column.Id.ToString() : String.Empty);
            var ColName = Filter != null && Filter.Column != null ? Filter.Column.GetDescription() : Resources.SelectColumn;
            ColName = ColName ?? "";
            
            var Field1Value = Filter != null ? ViewboxSession.FilterValueToString(Filter.Column, Filter.Value1) : String.Empty;
            var Field1Text = Filter != null ? ViewboxSession.FilterValueToString(Filter.Column, Filter.Value1) : Resources.EnterValue;
            var Field2Value = Filter != null ? ViewboxSession.FilterValueToString(Filter.Column, Filter.Value2) : String.Empty;
            var Field2Text = Filter != null ? ViewboxSession.FilterValueToString(Filter.Column, Filter.Value2) : Resources.EnterValue;

            if (Field1Text.Count(c => c == '.') == 1)
            {
                double outNumber = 0.0f;
                if (double.TryParse(Field1Text, out outNumber) && Culture.ToLower().Contains("de"))
                {
                    Field1Text = Field1Text.Replace(".", ",");
                }
            }

            if (Field2Text.Count(c => c == '.') == 1)
            {
                double outNumber = 0.0f;
                if (double.TryParse(Field2Text, out outNumber) && Culture.ToLower().Contains("de"))
                {
                    Field2Text = Field2Text.Replace(".", ",");
                }
            }
            <span class="operator op_bt value ternary">
                <div class="op-number-box">@Model.Number</div>
                <span class="op-command">Between(</span>
                <span class="op-dock value">
                    <span class="op-command">"</span>
                    <span class="op-command value">@Field1Value</span>
                    <span><input type="text" value="@Field1Text" placeholder="@Resources.EnterValue" class="text placeholder border" style="width: 50px" /></span>
                    <span class="op-command">"</span>
                </span>
                <div class="op-symbol" style="display: inline-block"> &le; </div>
                <span class="op-dock column">
                    <span class="op-command">,</span>
                    <span class="op-command column">@ColId</span>
                    <div class="dropdown placeholder border" placeholder="@Resources.SelectColumn">@ColName</div>
                </span>
                <div class="op-symbol" style="display: inline-block"> &le; </div>
                <span class="op-dock value">
                    <span class="op-command">,"</span>
                    <span class="op-command value">@Field2Value</span>
                    <span><input type="text" value="@Field2Text" placeholder="@Resources.EnterValue" class="text placeholder border" style="width: 50px" /></span>
                    <span class="op-command">"</span>
                </span>
                <span class="op-command">)</span>
                <div class="delete">x</div>
            </span>
        }
        break;
}