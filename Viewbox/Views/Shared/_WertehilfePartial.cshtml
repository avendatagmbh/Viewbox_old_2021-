@using SystemDb
@using Viewbox.Properties
@using Viewbox;
@model Viewbox.Models.Wertehilfe.IWertehilfe

<div class="search-opt-panel">
    <div class="bg-left">
    </div>
    @using (Html.BeginForm("", "", FormMethod.Get, new { id = "searchFormDistinct" }))
    {
        <input class="bg-middle placeholder" style="width: 380px;" name="search" type="text" id="searchBar"
               value="@(String.IsNullOrEmpty(Model.SearchText) ? Resources.SearchPhrase : Model.SearchText)" placeholder="@Resources.SearchPhrase" />
        <input type="submit" class="submit" value="" />
    }
</div>

<div class="exactmatch">
    <a class=@(Model.IsExactmatch ? "checkboxon" : "checkboxoff") href="#"></a>
    <span>@Resources.ExactMatch</span>
    @if (Model.ValueListCollection != null && Model.ValueListCollection.Count > 0)
    {
        <input type="button" value="@Resources.AppendAll" id="append-all" style="float: right; display: none;" />
    }
</div>
<div class="header">
    <input type="hidden" name="paramId" id="paramId" value=@(Model.Parameter.Id) />
    <div class="sort-column" style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden; max-width: 280px" title="@Model.Parameter.GetDescription()">@Model.Parameter.GetDescription()</div>

    <div class="distinct-sorting">
        <a class="ascending @(Model.Sorter.Sorts.Any(s => s.Name == "value" && s.Direction == "ASC") ? " active " : "")" nav="ascending_val" style="visibility: @(!ViewboxApplication.HideWertehilfeSorting ? "visible" : "hidden")" /><a class="descending @(Model.Sorter.Sorts.Any(s => s.Name == "value" && s.Direction == "DESC") ? " active " : "")" nav="descending_val" style="visibility: @(!ViewboxApplication.HideWertehilfeSorting ? "visible" : "hidden")" />

    </div>

    @if (Model.HasDescription)
    {
        <div class="sort-column">@Resources.Description</div>
        <div class="distinct-sorting">
        <a class="ascending @(Model.Sorter.Sorts.Any(s => s.Name == "description" &&  s.Direction == "ASC") ? " active " : "")" nav="ascending_desc" style="visibility: @(!ViewboxApplication.HideWertehilfeSorting ? "visible" : "hidden")" /><a class="descending @(Model.Sorter.Sorts.Any(s => s.Name == "description" && s.Direction == "DESC") ? " active " : "")" nav="descending_desc" style="visibility: @(!ViewboxApplication.HideWertehilfeSorting ? "visible" : "hidden")" />
    </div>
    }
    </div>
    <div class="scrollauto report-distinct-menu click">
        @if (Model.ValueListCollection != null && Model.ValueListCollection.Count > 0)
        {

            foreach (var v in Model.ValueListCollection)
            {
                <div class="entry gray-on-mouseover distinct">
                    <div class="entry-container" style="@Model.StyleFullWidth">
                        <div class="value @(Model.Parameter != null && (Model.Parameter.DataType == SqlType.Numeric || Model.Parameter.DataType == SqlType.Decimal) && Model.Parameter.TypeModifier == 0 ? "thousand-separator2" : "")" style="width: @(Model.MaxValueWidth)px;">@v.Value.ToString()</div>
                        @if (Model.HasDescription)
                        {
                            @*<div class="place-holder" style="@(v.PlaceHolderAndValueStyle) height: 15px; float: left;"></div>*@
                            <div class="value-description">@v.Description</div>
                        }
                    </div>

                </div>
            }
        }
        else
        {
            <div>@Resources.NoDataFound</div>
        }
    </div>
    <div class="navigation">
        <span class="hide" id="value-distinct-start">@Model.Start</span>
        <span class="hide" id="value-distinct-direction">@(Model.Sorter.ToString())</span>
        <span class="hide" id="value-distinct-search">@(Model.SearchText)</span>
        <span class="hide" id="value-per-page">@(Model.RowsPerPage)</span>
        @if (Model.Page > 0)
        {
            <a class="iconx first" nav="activefirst" />
            <a class="iconx back" nav="activeback" />
        }
        else
        {
            <span class="iconx first"></span>
            <span class="iconx back"></span>
        }
        @if (Model.RowCount > 0)
        {
            <span>
                @((Model.Start + 1).ToString("#,0")) - @((Model.Start + Model.RowsPerPage >= Model.MaxRowCountToDisplay ? Model.MaxRowCountToDisplay : Model.Start + Model.RowsPerPage).ToString("#,0"))
                / @(Model.MaxRowCountToDisplay.ToString("#,0"))
            </span>
        }
        @if (Model.MaxPage > (Model.Page + 1))
        {
            <a class="iconx next" nav="activenext" />
            <a class="iconx last" nav="activelast" navlast=@(Model.MaxRowCountToDisplay % Model.RowsPerPage == 0 ? Model.MaxRowCountToDisplay - Model.RowsPerPage : Model.MaxRowCountToDisplay - (Model.MaxRowCountToDisplay % Model.RowsPerPage)) />
        }
        else
        {
            <span class="iconx next"></span>
            <span class="iconx last"></span>
        }
    </div>