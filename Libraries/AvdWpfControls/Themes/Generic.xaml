<ResourceDictionary x:Class="AvdWpfControls.Themes.Generic"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:AvdWpfControls"
                    xmlns:Converters="clr-namespace:AvdWpfControls.Converters"
                    xmlns:Localisation="clr-namespace:AvdWpfControls.Localisation"
                    xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna">
  <LinearGradientBrush x:Key="OrangeGradientBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#edb75f" Offset="0" />
    <GradientStop Color="#b77401" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="GreyGradientBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#EDEDED" Offset="0" />
    <GradientStop Color="#C9C9C9" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="TransparentOrangeGradientBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#A0edb75f" Offset="0" />
    <GradientStop Color="#A0b77401" Offset="1" />
  </LinearGradientBrush>

  <Converters:BoolInverter x:Key="BoolInverter" />
  <Converters:ObjectToTypeStringConverter x:Key="ObjectToTypeStringConverter" />
  <Converters:ValueExistsToBoolConverter x:Key="ValueExistsToBoolConverter" />
  <Converters:ValueExistsToVisibilityConverter x:Key="ValueExistsToVisibilityConverter" />
  <LinearGradientBrush x:Key="AvdMenuButtonMouseOverBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#D0FFFFFF" Offset="0" />
    <GradientStop Color="#40FFFFFF" Offset="0.15" />
    <GradientStop Color="#40FFFFFF" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="AvdMenuButtonPressedBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#C0FFFFFF" Offset="0" />
    <GradientStop Color="#80FFFFFF" Offset="0.15" />
    <GradientStop Color="#80FFFFFF" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="GroupBoxBorderBorderBrush" StartPoint="0,0" EndPoint="1,1">
    <GradientStop Color="#D0909090" Offset="0" />
    <GradientStop Color="#D0A4A4A4" Offset="0.35" />
    <GradientStop Color="#D0B7B5B5" Offset="0.4" />
    <GradientStop Color="#D0A0A0A0" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="GroupBoxBorderBackgroundBrush" StartPoint="0,0" EndPoint="1,1">
    <GradientStop Color="#F8F8F8" Offset="0" />
    <GradientStop Color="#E8E8E8" Offset="1" />
  </LinearGradientBrush>
  <Style x:Key="AvdMenuText" TargetType="TextBlock">
    <Setter Property="Foreground" Value="#E0E0E0" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="FontWeight" Value="Normal" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.5"></Setter>
      </Trigger>
      <Trigger Property="Text" Value="{x:Null}">
        <Setter Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Text" Value="">
        <Setter Property="Visibility" Value="Collapsed" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <ControlTemplate x:Key="HierarchialNavigationToggleButton" TargetType="{x:Type ToggleButton}">
    <Border x:Name="Border" CornerRadius="5" Margin="0,2" Background="#01000000">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver">
          </VisualState>
          <VisualState x:Name="Pressed">
          </VisualState>
          <VisualState x:Name="Disabled">
          </VisualState>
        </VisualStateGroup>
        <VisualStateGroup x:Name="CheckStates">
          <VisualState x:Name="Checked">
            <Storyboard>
              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                             Storyboard.TargetName="CollapsedArrow">
                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
              </ObjectAnimationUsingKeyFrames>
              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                             Storyboard.TargetName="ExpandededArrow">
                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
              </ObjectAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Unchecked" />
          <VisualState x:Name="Indeterminate" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <Grid>
        <Path x:Name="CollapsedArrow" HorizontalAlignment="Center" VerticalAlignment="Center"
              Data="M 0 0 L 0 8 L 4 4 Z">
          <Path.Fill>
            <SolidColorBrush Color="{DynamicResource GlyphColor}" />
          </Path.Fill>
        </Path>
        <Path x:Name="ExpandededArrow" HorizontalAlignment="Center" VerticalAlignment="Center"
              Visibility="Collapsed" Data="M 0 4 L 4 8 L 8 4 Z">
          <Path.Fill>
            <SolidColorBrush Color="{DynamicResource GlyphColor}" />
          </Path.Fill>
        </Path>
      </Grid>
    </Border>
  </ControlTemplate>
  <!-- Fill Brushes -->
  <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#FFF" Offset="0.0" />
        <GradientStop Color="#CCC" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#FFF" Offset="0.0" />
        <GradientStop Color="#CCC" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#FFF" Offset="0.0" />
        <GradientStop Color="#EEE" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#FFF" Offset="0.0" />
        <GradientStop Color="#EEE" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#FFF" Offset="0.0" />
        <GradientStop Color="#AAA" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#BBB" Offset="0.0" />
        <GradientStop Color="#EEE" Offset="0.1" />
        <GradientStop Color="#EEE" Offset="0.9" />
        <GradientStop Color="#FFF" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
  <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
  <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />
  <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />
  <!-- Border Brushes -->
  <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#CCC" Offset="0.0" />
        <GradientStop Color="#444" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#CCC" Offset="0.0" />
        <GradientStop Color="#444" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#777" Offset="0.0" />
        <GradientStop Color="#000" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#444" Offset="0.0" />
        <GradientStop Color="#888" Offset="1.0" />
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
  <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
  <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />
  <!-- Miscellaneous Brushes -->
  <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
  <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

  <Style TargetType="{x:Type local:CtlLogo}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:CtlLogo}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Height="65">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Image Height="Auto" Grid.Column="0" Width="Auto" Margin="5" Stretch="Uniform"
                     HorizontalAlignment="Right" VerticalAlignment="Top" Source="/AvdWpfControls;component/Resources/logo.png"
                     Grid.RowSpan="2" />
              <TextBlock Opacity="0.95" Padding="0" Grid.Row="0" Grid.Column="1" Height="Auto"
                         HorizontalAlignment="Left" Margin="5,14,0,0" VerticalAlignment="Bottom" FontSize="24" FontFamily="Arial"
                         Foreground="#E0000000" FontWeight="Bold" x:Name="txtCaption" Text="{Binding Caption}" />
              <TextBlock Opacity="0.95" Padding="0" Grid.Row="1" Grid.Column="1" Height="Auto"
                         HorizontalAlignment="Left" Margin="7,0,0,3" VerticalAlignment="Top" FontSize="11" FontFamily="Arial" FontStyle="Italic"
                         x:Name="txtVersion" Text="{Binding Version}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--<Style TargetType="{x:Type local:NumericTextbox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NumericTextbox}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    
  <!--<Style TargetType="{x:Type local:NumericTextbox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border 
          Name="Border"
          CornerRadius="2" 
          Padding="2"
          Background="{StaticResource WindowBackgroundBrush}"
          BorderBrush="{StaticResource SolidBorderBrush}"
          BorderThickness="1" >
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
  <Style TargetType="{x:Type local:ImageButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ImageButton}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Image x:Name="content" Source="{TemplateBinding ImageSource}"
                   Height="{TemplateBinding ImageHeight}" />
            <TextBlock Grid.Row="1" Text="{TemplateBinding Caption}" HorizontalAlignment="Center">
              <TextBlock.Style>
                <Style TargetType="TextBlock">
                  <Style.Triggers>
                    <Trigger Property="Text" Value="{x:Null}">
                      <Setter Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="Text" Value="">
                      <Setter Property="Visibility" Value="Collapsed" />
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>
            </TextBlock>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Effect">
                <Setter.Value>
                  <DropShadowEffect ShadowDepth="6" Opacity="0.75" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="content" Property="RenderTransform">
                <Setter.Value>
                  <ScaleTransform CenterX="15" CenterY="15" ScaleX="1.05" ScaleY="1.05"></ScaleTransform>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="content" Property="RenderTransform">
                <Setter.Value>
                  <ScaleTransform CenterX="10" CenterY="10" ScaleX="0.95" ScaleY="0.95"></ScaleTransform>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="content" Property="Opacity" Value="0.5" />
              <Setter Property="Foreground" Value="Gray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:ImageButton2}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="local:ImageButton2"
                         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib"
                         xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">
          <mwt:ButtonChrome Name="Chrome" BorderBrush="Silver"
                            RenderDefaulted="{TemplateBinding Button.IsDefaulted}" RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                            RenderPressed="{TemplateBinding ButtonBase.IsPressed}" SnapsToDevicePixels="True">
            <mwt:ButtonChrome.Background>
              <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                <GradientBrush.GradientStops>
                  <GradientStopCollection>
                    <GradientStop Color="#FFF" Offset="0.0" />
                    <GradientStop Color="#CCC" Offset="1.0" />
                  </GradientStopCollection>
                </GradientBrush.GradientStops>
              </LinearGradientBrush>
            </mwt:ButtonChrome.Background>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Image x:Name="content" Source="{TemplateBinding ImageSource}"
                     Height="{TemplateBinding ImageHeight}" Margin="2,0,2,0">
                <Image.Style>
                  <Style TargetType="Image">
                    <Style.Triggers>
                      <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.5"></Setter>
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </Image.Style>
              </Image>
              <TextBlock Grid.Column="1" Text="{TemplateBinding Caption}" VerticalAlignment="Center"
                         Margin="0,0,2,0">
                <TextBlock.Style>
                  <Style TargetType="TextBlock">
                    <Style.Triggers>
                      <Trigger Property="Text" Value="{x:Null}">
                        <Setter Property="Visibility" Value="Collapsed" />
                      </Trigger>
                      <Trigger Property="Text" Value="">
                        <Setter Property="Visibility" Value="Collapsed" />
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </TextBlock.Style>
              </TextBlock>
            </Grid>
          </mwt:ButtonChrome>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused">
              <Setter Property="mwt:ButtonChrome.RenderDefaulted" TargetName="Chrome">
                <Setter.Value>
                  <s:Boolean>True</s:Boolean>
                </Setter.Value>
              </Setter>
              <Trigger.Value>
                <s:Boolean>True</s:Boolean>
              </Trigger.Value>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked">
              <Setter Property="mwt:ButtonChrome.RenderPressed" TargetName="Chrome">
                <Setter.Value>
                  <s:Boolean>True</s:Boolean>
                </Setter.Value>
              </Setter>
              <Trigger.Value>
                <s:Boolean>True</s:Boolean>
              </Trigger.Value>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled">
              <Setter Property="TextElement.Foreground">
                <Setter.Value>
                  <SolidColorBrush>#FFADADAD</SolidColorBrush>
                </Setter.Value>
              </Setter>
              <Trigger.Value>
                <s:Boolean>False</s:Boolean>
              </Trigger.Value>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:SlideControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SlideControl}">
          <ControlTemplate.Resources>
          </ControlTemplate.Resources>
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" Panel.ZIndex="-100">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <ListBox
ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedContent.Headers}"
BorderBrush="Transparent" BorderThickness="0" Background="Transparent">
                <ListBox.ItemContainerStyle>
                  <Style TargetType="ListBoxItem">
                    <Style.Resources>
                      <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                                       Color="Transparent" />
                    </Style.Resources>
                  </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemsPanel>
                  <ItemsPanelTemplate>
                    <WrapPanel
Width="{Binding (FrameworkElement.ActualWidth), RelativeSource={RelativeSource AncestorType=ScrollContentPresenter}}"
ItemWidth="{Binding (ListView.View).ItemWidth, RelativeSource={RelativeSource AncestorType=ListView}}"
MinWidth="{Binding ItemWidth, RelativeSource={RelativeSource Self}}"
ItemHeight="{Binding (ListView.View).ItemHeight, RelativeSource={RelativeSource AncestorType=ListView}}" />
                  </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                  <DataTemplate>
                    <ContentPresenter Content="{Binding .}" />
                  </DataTemplate>
                </ListBox.ItemTemplate>
              </ListBox>
              <Grid Grid.Row="1">
                <Grid x:Name="Content">
                  <Grid.Style>
                    <Style TargetType="Grid">
                      <Style.Triggers>
                        <DataTrigger
Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=UseClipping}" Value="True">
                          <Setter Property="Clip">
                            <Setter.Value>
                              <RectangleGeometry
Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContentClippingRect}" />
                            </Setter.Value>
                          </Setter>
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </Grid.Style>
                  <Grid.RenderTransform>
                    <TranslateTransform
X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContentTransformX}"
Y="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContentTransformY}" />
                  </Grid.RenderTransform>
                  <ContentPresenter ContentSource="Content" />
                </Grid>
                <Grid x:Name="items" IsItemsHost="True">
                  <Grid.Style>
                    <Style TargetType="Grid">
                      <Style.Triggers>
                        <DataTrigger
Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=UseClipping}" Value="True">
                          <Setter Property="Clip">
                            <Setter.Value>
                              <RectangleGeometry
Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsClippingRect}" />
                            </Setter.Value>
                          </Setter>
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </Grid.Style>
                  <Grid.RenderTransform>
                    <TranslateTransform
X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsTransformX}"
Y="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsTransformY}" />
                  </Grid.RenderTransform>
                </Grid>
              </Grid>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type local:SlideControlItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SlideControlItem}">
          <ControlTemplate.Resources>
          </ControlTemplate.Resources>

          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" Panel.ZIndex="-100">
            <Grid>
              <Grid x:Name="Content">
                <Grid.Style>
                  <Style TargetType="Grid">
                    <Style.Triggers>
                      <DataTrigger
Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=UseClipping}" Value="True">
                        <Setter Property="Clip">
                          <Setter.Value>
                            <RectangleGeometry
Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContentClippingRect}" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Grid.Style>
                <Grid.RenderTransform>
                  <TranslateTransform
X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContentTransformX}"
Y="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContentTransformY}" />
                </Grid.RenderTransform>
                <ContentPresenter ContentSource="Content" />
              </Grid>
              <Grid x:Name="items" IsItemsHost="True">
                <Grid.Style>
                  <Style TargetType="Grid">
                    <Style.Triggers>
                      <DataTrigger
Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=UseClipping}" Value="True">
                        <Setter Property="Clip">
                          <Setter.Value>
                            <RectangleGeometry
Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsClippingRect}" />
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Grid.Style>
                <Grid.RenderTransform>
                  <TranslateTransform
X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsTransformX}"
Y="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsTransformY}" />
                </Grid.RenderTransform>
              </Grid>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type local:SlideControlHeader}">
    <Setter Property="Background" Value="#CCC" />
    <Setter Property="BorderBrush" Value="#888" />
    <Setter Property="Foreground" Value="Black" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SlideControlHeader}">
          <Grid Margin="0,0,5,0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border Background="{TemplateBinding Background}" Margin="0,1,0,1"
                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Padding="1" CornerRadius="3">

              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Image x:Name="content" Source="{TemplateBinding ImageSource}" Height="16"
                       Margin="2,0,2,0">
                  <Image.Style>
                    <Style TargetType="Image">
                      <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                          <Setter Property="Opacity" Value="0.5"></Setter>
                        </Trigger>
                      </Style.Triggers>
                    </Style>
                  </Image.Style>
                </Image>
                <TextBlock Grid.Column="1" Text="{TemplateBinding Caption}" Margin="0,0,2,0"
                           VerticalAlignment="Center" Padding="0">
                  <TextBlock.Style>
                    <Style TargetType="TextBlock">
                      <Style.Triggers>
                        <Trigger Property="Text" Value="{x:Null}">
                          <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Text" Value="">
                          <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                      </Style.Triggers>
                    </Style>
                  </TextBlock.Style>
                </TextBlock>
              </Grid>
            </Border>
            <!--<Path Grid.Column="1" Stroke="Transparent" StrokeThickness="1" Fill="{TemplateBinding Background}" Data="M 0 0 L 1 1 L 0 2 Z" Stretch="Fill" Width="10" Margin="-1,0,0,0"/>
                        <Path Grid.Column="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" Fill="Transparent" Data="M 0 0 L 1 1 L 0 2" Stretch="Fill" Width="10" Margin="0,-0.15,0,-0.15"/>
                        <Path Stroke="Transparent" StrokeThickness="0" Data="M 0,0 H 1 V 1 H 0 Z" Stretch="Fill"  />
                        <Path Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" Data="M 1,0 H 0 V 1 H 1" Stretch="Fill" Margin="0,0,-1.3,0" />-->
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Converters:BoolToVisibilityConverter x:Key="trueToVisibilityConverter" VisibleValue="True" HiddenState="Collapsed" />
  <Converters:BoolToVisibilityConverter x:Key="falseToVisibilityConverter" VisibleValue="False"
                                        HiddenState="Collapsed" />

  <Style TargetType="{x:Type local:HierarchicalTabControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:HierarchicalTabControl}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="contentCol" MinWidth="200"
                                  Width="{Binding NavAreaWidth, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  MaxWidth="{TemplateBinding NavAreaMaxWidth}" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Expander ExpandDirection="Right" IsExpanded="{TemplateBinding NavAreaExpanded}"
                        x:Name="navExpander" Background="White" Margin="0,0,5,0"
                        Visibility="{TemplateBinding HideExpanderButton, Converter={StaticResource falseToVisibilityConverter}}">
                <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                              VerticalScrollBarVisibility="Auto">
                  <StackPanel IsItemsHost="True" Margin="0,5,5,5" />
                </ScrollViewer>
              </Expander>
              <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto"
                            Visibility="{TemplateBinding HideExpanderButton, Converter={StaticResource trueToVisibilityConverter}}">
                <StackPanel IsItemsHost="True" Margin="0,5,15,5" />
              </ScrollViewer>
              <GridSplitter x:Name="splitter" Width="5" Background="Silver" />
              <Border Grid.Column="1" CornerRadius="5" Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}">
                <ContentPresenter Content="{TemplateBinding SelectedContent}" />
              </Border>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="navExpander" Property="IsExpanded" Value="False">
              <Setter TargetName="contentCol" Property="Width" Value="Auto" />
              <Setter TargetName="contentCol" Property="MinWidth" Value="0" />
              <Setter TargetName="splitter" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type local:HierarchicalTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:HierarchicalTabItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <ToggleButton OverridesDefaultStyle="True"
                          Template="{StaticResource HierarchialNavigationToggleButton}" Width="16"
                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <ToggleButton.Style>
                <Style TargetType="ToggleButton">
                  <Style.Triggers>
                    <DataTrigger
Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Items.Count}" Value="0">
                      <Setter Property="Visibility" Value="Hidden" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </ToggleButton.Style>
            </ToggleButton>
            <Border Grid.Column="1" Name="Bd" Background="LightGray" BorderBrush="Silver">
              <ContentPresenter Name="PART_Header" ContentSource="Header" />
            </Border>
            <ItemsPresenter Grid.Row="1" Grid.Column="1">
              <ItemsPresenter.Style>
                <Style TargetType="ItemsPresenter">
                  <Style.Triggers>
                    <DataTrigger
Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded}" Value="False">
                      <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </ItemsPresenter.Style>
            </ItemsPresenter>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="Bd" Property="Panel.Background" Value="Orange" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="DarkGreen" />
              <Setter TargetName="Bd" Property="TextElement.Foreground"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel IsItemsHost="True" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
    <Border Name="Border" CornerRadius="3" Background="{StaticResource NormalBrush}"
            BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="20" />
        </Grid.ColumnDefinitions>
        <Path x:Name="Arrow" Grid.Column="1" Fill="{StaticResource GlyphBrush}" HorizontalAlignment="Center"
              VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
        <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource DisabledForegroundBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxToggleButton1" TargetType="ToggleButton">
    <Border Name="Border" CornerRadius="0,3,3,0" BorderThickness="1" Background="Transparent"
            BorderBrush="Transparent">
      <Path x:Name="Arrow" Grid.Column="1" Fill="{StaticResource GlyphBrush}" HorizontalAlignment="Center"
            VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" />
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
        <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource DisabledForegroundBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
    <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
  </ControlTemplate>
   
  <!-- IsEditable mode is not yet implemented correctly (missing binding?) -->
  <Style TargetType="local:AvdComboBox">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="BorderBrush" Value="Silver" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="local:AvdComboBox">
          <Border BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}">
            <Grid>
              <ToggleButton Name="ConentSiteToggleButton" Template="{StaticResource ComboBoxToggleButton}"
                            Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
              </ToggleButton>
              <ContentPresenter Name="ContentSite" IsHitTestVisible="False"
                                Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="5,1,23,1" VerticalAlignment="Center"
                                HorizontalAlignment="Left" />
              <Border x:Name="PART_EditableTextBox" CornerRadius="3" BorderThickness="1" BorderBrush="Silver"
                      Background="White" VerticalAlignment="Center" Visibility="Hidden">
                <Grid>
                  <TextBox BorderBrush="Transparent" Background="Transparent" Style="{x:Null}"
                           BorderThickness="0" Margin="0,1,20,1" Focusable="True" IsReadOnly="{TemplateBinding IsReadOnly}"
                           Template="{StaticResource ComboBoxTextBox}" />
                  <ToggleButton Name="PART_EditableTextBoxToggleButton"
                                Template="{StaticResource ComboBoxToggleButton1}" Focusable="false" Visibility="Hidden"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"
                                Width="16" HorizontalAlignment="Right">
                  </ToggleButton>
                </Grid>
              </Border>
              <TextBlock x:Name="tbSelectValueMessage"
                         Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectValueMessage}" IsHitTestVisible="False"
                         Visibility="Collapsed" VerticalAlignment="Center" Foreground="#404040" Margin="5,0,23,0" />
              <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}"
                     AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                <Popup.Effect>
                  <DropShadowEffect Opacity="0.5" ShadowDepth="5" />
                </Popup.Effect>
                <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}"
                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                  <Border x:Name="DropDownBorder" Background="White" BorderThickness="1"
                          BorderBrush="Silver" />
                  <ScrollViewer SnapsToDevicePixels="True">
                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                  </ScrollViewer>
                </Grid>
              </Popup>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="SelectedItem" Value="{x:Null}" />
              </MultiTrigger.Conditions>
              <Setter TargetName="tbSelectValueMessage" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
              <Setter TargetName="PART_EditableTextBoxToggleButton" Property="Visibility" Value="Visible" />
              <Setter TargetName="ConentSiteToggleButton" Property="Visibility" Value="Hidden" />

            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers></Style.Triggers>
  </Style>
  <Style TargetType="{x:Type local:AvdTabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AvdTabItem}">
          <Grid>
            <Border Name="Border" Background="#06597b" BorderBrush="#06597b" Padding="5,2">
              <StackPanel VerticalAlignment="Center"
                          HorizontalAlignment="{TemplateBinding HeaderHorizontalAlignment}" Orientation="Horizontal">
                <Image Source="{TemplateBinding ImageSource}" Height="16" Margin="0,0,2,0">
                  <Image.Style>
                    <Style TargetType="Image">
                      <Style.Triggers>
                        <Trigger Property="Source" Value="{x:Null}">
                          <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                      </Style.Triggers>
                    </Style>
                  </Image.Style>
                </Image>
                <TextBlock VerticalAlignment="Center" x:Name="ContentSite" Foreground="White"
                           Text="{TemplateBinding Caption}" />
              </StackPanel>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Panel.ZIndex" Value="100" />
              <Setter TargetName="ContentSite" Property="Foreground" Value="#222" />
              <Setter TargetName="Border" Property="Background">
                <Setter.Value>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#edb75f" Offset="0" />
                    <GradientStop Color="#b77401" Offset="1" />
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
              <Setter TargetName="Border" Property="BorderBrush" Value="#edb75f" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background" Value="#EEE" />
              <Setter TargetName="Border" Property="BorderBrush" Value="#888" />
              <Setter TargetName="ContentSite" Property="Foreground" Value="#666" />
            </Trigger>
            <DataTrigger
Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Top">
              <Setter TargetName="Border" Property="CornerRadius" Value="6,6,0,0" />
              <Setter TargetName="Border" Property="Margin" Value="1,0,1,0" />
              <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
            </DataTrigger>
            <DataTrigger
Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Left">
              <Setter TargetName="Border" Property="CornerRadius" Value="6,0,0,6" />
              <Setter TargetName="Border" Property="Margin" Value="0,1,0,1" />
              <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,1" />
            </DataTrigger>
            <DataTrigger
Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Right">
              <Setter TargetName="Border" Property="CornerRadius" Value="0,6,6,0" />
              <Setter TargetName="Border" Property="Margin" Value="0,1,0,1" />
              <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,1" />
            </DataTrigger>
            <DataTrigger
Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Bottom">
              <Setter TargetName="Border" Property="CornerRadius" Value="0,0,6,6" />
              <Setter TargetName="Border" Property="Margin" Value="1,0,1,0" />
              <Setter TargetName="Border" Property="BorderThickness" Value="1,0,1,1" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!-- style for ImageRadioButton -->
  <Style TargetType="{x:Type local:ImageRadioButton}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ImageRadioButton}">
          <Border x:Name="Border" Background="#01000000">
            <StackPanel>
              <StackPanel.Resources>
                <Style TargetType="Image">
                  <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                      <Setter Property="Opacity" Value="0.5"></Setter>
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </StackPanel.Resources>
              <BulletDecorator Background="Transparent" HorizontalAlignment="Center" x:Name="Bullet">
                <BulletDecorator.Bullet>
                  <Grid>
                    <Image x:Name="Image" Height="{TemplateBinding ImageHeight}"
                           Source="{TemplateBinding ImageSource}" Opacity="0.9" VerticalAlignment="Center" HorizontalAlignment="Center" />
                  </Grid>
                </BulletDecorator.Bullet>
              </BulletDecorator>
              <TextBlock x:Name="content" Grid.Column="1" Text="{TemplateBinding Content}"
                         VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,2,0" TextAlignment="Center" MaxWidth="100"
                         TextWrapping="Wrap" Foreground="{TemplateBinding Foreground}">
                <TextBlock.Style>
                  <Style TargetType="TextBlock">
                    <Style.Triggers>
                      <Trigger Property="Text" Value="{x:Null}">
                        <Setter Property="Visibility" Value="Collapsed" />
                      </Trigger>
                      <Trigger Property="Text" Value="">
                        <Setter Property="Visibility" Value="Collapsed" />
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </TextBlock.Style>
              </TextBlock>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <!--<Setter TargetName="Border" Property="Background" Value="#E0E0E0" />
                            <Setter TargetName="Border" Property="OpacityMask">
                                <Setter.Value>
                                    <RadialGradientBrush>
                                        <GradientStop Offset="0.1" Color="#A0000000"></GradientStop>
                                        <GradientStop Offset="0.8" Color="#80000000"></GradientStop>
                                        <GradientStop Offset="1" Color="Transparent"></GradientStop>
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>-->
              <Setter TargetName="content" Property="FontWeight" Value="Bold" />
              <Setter TargetName="Bullet" Property="Effect">
                <Setter.Value>
                  <!--<DropShadowEffect x:Name="Shadow" Opacity="1" />-->
                  <DropShadowEffect Color="White" BlurRadius="10" ShadowDepth="5" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="Border" Property="Background">
                <Setter.Value>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#D0FFFFFF" Offset="0" />
                    <GradientStop Color="#40FFFFFF" Offset="0.15" />
                    <GradientStop Color="#40FFFFFF" Offset="1" />
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
              <Setter TargetName="content" Property="Margin" Value="0,0,0,0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:MonetaryTextBox}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="HorizontalContentAlignment" Value="Right" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MonetaryTextBox}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border Background="{TemplateBinding Background}" x:Name="Bd" BorderBrush="#AAA"
                    BorderThickness="1" CornerRadius="2">
              <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" />
            </Border>
            <TextBlock Text="{TemplateBinding CurrencyString}" Grid.Column="1" Margin="5,0,0,0"
                       VerticalAlignment="Center" Foreground="Black" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Width" Value="Auto">
              <Setter Property="MinWidth" Value="40" />
            </Trigger>
            <Trigger Property="Height" Value="Auto">
              <Setter Property="MinHeight" Value="20" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Property="Background"
                      Value="{StaticResource DisabledBackgroundBrush}" />
              <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:TogglePopup}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:TogglePopup}">
          <Grid>
            <ToggleButton x:Name="Btn"
                          IsHitTestVisible="{Binding ElementName=Popup, Path=IsOpen, Mode=OneWay, Converter={StaticResource BoolInverter}}">
              <ToggleButton.Template>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Image x:Name="image"
                           Height="{Binding RelativeSource={RelativeSource AncestorType=local:TogglePopup}, Path=ImageHeight}"
                           Source="{Binding RelativeSource={RelativeSource AncestorType=local:TogglePopup}, Path=ImageSource}" />
                    <TextBlock Margin="3,0,0,0" Grid.Column="1"
                               Text="{Binding RelativeSource={RelativeSource AncestorType=local:TogglePopup}, Path=Text}" VerticalAlignment="Center"
                               Foreground="{TemplateBinding Foreground}" />
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter TargetName="image" Property="Effect">
                        <Setter.Value>
                          <DropShadowEffect ShadowDepth="6" Opacity="0.75" />
                        </Setter.Value>
                      </Setter>
                      <Setter TargetName="image" Property="RenderTransform">
                        <Setter.Value>
                          <ScaleTransform CenterX="15" CenterY="15" ScaleX="1.05"
                                          ScaleY="1.05"></ScaleTransform>
                        </Setter.Value>
                      </Setter>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </ToggleButton.Template>
            </ToggleButton>
            <Popup x:Name="Popup" IsOpen="{Binding IsChecked, ElementName=Btn}" StaysOpen="False"
                   AllowsTransparency="True" PopupAnimation="Fade" Placement="MousePoint" HorizontalOffset="5" VerticalOffset="5">
              <ContentPresenter x:Name="content" Content="{TemplateBinding Content}" />
            </Popup>
          </Grid>
          <!-- try to focus content on popup view (does not yet work) -->
          <!--<ControlTemplate.Triggers>
                    <Trigger SourceName="Btn" Property="IsChecked" Value="True">
                        <Setter TargetName="Popup" Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                        <Setter TargetName="content" Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                    </Trigger>
                </ControlTemplate.Triggers>-->
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:AssistantControlTabPanel}">
    <Setter Property="SelectedIndex" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AssistantControlTabPanel}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="40" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Border>
                <Border.Background>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#edb75f" Offset="0" />
                    <GradientStop Color="#b77401" Offset="1" />
                  </LinearGradientBrush>
                </Border.Background>
                <StackPanel Orientation="Horizontal" Margin="5">
                  <StackPanel.Resources>
                    <Style TargetType="Label">
                      <Setter Property="VerticalAlignment" Value="Center" />
                      <Setter Property="FontSize" Value="16" />
                      <Setter Property="FontStyle" Value="Italic" />
                      <Setter Property="Padding" Value="0" />
                    </Style>
                  </StackPanel.Resources>
                  <Label Content="{x:Static Localisation:ResourcesCommon.Step}" Margin="0,0,5,0" />
                  <Label Content="{TemplateBinding CurrentStep}" />
                  <Label Content="{x:Static Localisation:ResourcesCommon.Of}" Margin="5,0" />
                  <Label Content="{TemplateBinding StepCount}" />
                  <Label Content=": " />
                  <Label
Content="{Binding SelectedItem.Header, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                </StackPanel>
              </Border>
              <Border Grid.Row="1" Padding="{TemplateBinding Padding}">
                <ContentPresenter ContentSource="SelectedContent" />
              </Border>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:AssistantControl}">
    <Setter Property="SelectedIndex" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AssistantControl}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="40" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
                            
              <!-- caption -->
              <Border>
                <Border.Background>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#edb75f" Offset="0" />
                    <GradientStop Color="#b77401" Offset="1" />
                  </LinearGradientBrush>
                </Border.Background>
                <StackPanel Orientation="Horizontal" Margin="5">
                  <StackPanel.Resources>
                    <Style TargetType="Label">
                      <Setter Property="VerticalAlignment" Value="Center" />
                      <Setter Property="FontSize" Value="16" />
                      <Setter Property="FontStyle" Value="Italic" />
                      <Setter Property="Padding" Value="0" />
                    </Style>
                  </StackPanel.Resources>
                  <StackPanel Orientation="Horizontal"
                              Visibility="{TemplateBinding ShowSteps, Converter={StaticResource trueToVisibilityConverter}}">
                    <Label Content="{x:Static Localisation:ResourcesCommon.Step}" Margin="0,0,5,0" />
                    <Label Content="{TemplateBinding CurrentStep}" />
                    <Label Content="{x:Static Localisation:ResourcesCommon.Of}" Margin="5,0" />
                    <Label Content="{TemplateBinding StepCount}" />
                    <Label Content=": " />
                  </StackPanel>
                  <Label
Content="{Binding SelectedItem.Header, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                </StackPanel>
              </Border>
              <!-- detail caption -->
              <Border Grid.Row="1" Background="{TemplateBinding DetailHeaderBackground}">
                <Border.Style>
                  <Style TargetType="Border">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                      <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                          <Condition
Binding="{Binding SelectedItem, Converter={StaticResource ObjectToTypeStringConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"
Value="AssistantTabItem" />
                          <Condition
Binding="{Binding SelectedItem.DetailHeader, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ValueExistsToBoolConverter}}"
Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Visible" />
                      </MultiDataTrigger>
                      <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                          <Condition
Binding="{Binding SelectedItem, Converter={StaticResource ObjectToTypeStringConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"
Value="AssistantTabItem" />
                          <Condition
Binding="{Binding SelectedItem.DetailHeaderImageSource, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ValueExistsToBoolConverter}}"
Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Visible" />
                      </MultiDataTrigger>
                    </Style.Triggers>
                  </Style>
                </Border.Style>
                <StackPanel Orientation="Horizontal" Margin="5,2">
                  <Image VerticalAlignment="Center" Margin="0,0,5,0">
                    <Image.Style>
                      <Style TargetType="Image">
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                          <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                              <Condition
Binding="{Binding SelectedItem, Converter={StaticResource ObjectToTypeStringConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"
Value="AssistantTabItem" />
                              <Condition
Binding="{Binding SelectedItem.DetailHeaderImageSource, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ValueExistsToBoolConverter}}"
Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" />
                            <Setter Property="Source"
                                    Value="{Binding SelectedItem.DetailHeaderImageSource, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <Setter Property="Height"
                                    Value="{Binding SelectedItem.DetailHeaderImageHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                          </MultiDataTrigger>
                        </Style.Triggers>
                      </Style>
                    </Image.Style>
                  </Image>
                  <TextBlock Grid.Row="0" TextWrapping="Wrap" FontSize="16" Foreground="#333"
                             FontStyle="Italic" VerticalAlignment="Center">
                    <TextBlock.Style>
                      <Style TargetType="TextBlock">
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                          <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                              <Condition
Binding="{Binding SelectedItem, Converter={StaticResource ObjectToTypeStringConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"
Value="AssistantTabItem" />
                              <Condition
Binding="{Binding SelectedItem.DetailHeader, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ValueExistsToBoolConverter}}"
Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" />
                            <Setter Property="Text"
                                    Value="{Binding SelectedItem.DetailHeader, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                          </MultiDataTrigger>
                        </Style.Triggers>
                      </Style>
                    </TextBlock.Style>
                  </TextBlock>
                </StackPanel>
              </Border>
                            
              <!-- content -->
              <Border Grid.Row="2" Padding="{TemplateBinding Padding}">
                <ContentPresenter ContentSource="SelectedContent" />
              </Border>
              <!-- button bar -->
              <Border Grid.Row="3" Style="{TemplateBinding ButtonBorderStyle}"
                      Visibility="{Binding ReplaceFooter, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:AssistantControl}}, Converter={StaticResource ValueExistsToVisibilityConverter}}">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <StackPanel Orientation="Horizontal" Margin="5">
                    <StackPanel.Style>
                      <Style TargetType="StackPanel">
                        <Style.Triggers>
                          <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                              <Condition
Binding="{Binding SelectedItem, Converter={StaticResource ObjectToTypeStringConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"
Value="AssistantTabItem" />
                              <Condition
Binding="{Binding SelectedItem.IsSummaryPage, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                          </MultiDataTrigger>
                          <DataTrigger
Binding="{Binding IsNavigationButtonVisible, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:AssistantControl}}}"
Value="False">
                            <Setter Property="Visibility" Value="Collapsed" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </StackPanel.Style>
                    <Button Content="{x:Static Localisation:ResourcesCommon.Back}" MinWidth="75"
                            Click="AssistantControlLast_OnClick"
                            Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:AssistantControl}}}">
                      <Button.Style>
                        <Style TargetType="Button">
                          <Style.Triggers>
                            <DataTrigger
Binding="{Binding BackAllowed, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:AssistantControl}}}"
Value="False">
                              <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <MultiDataTrigger>
                              <MultiDataTrigger.Conditions>
                                <Condition
Binding="{Binding SelectedItem, Converter={StaticResource ObjectToTypeStringConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"
Value="AssistantTabItem" />
                                <Condition
Binding="{Binding SelectedItem.BackAllowed, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False" />
                              </MultiDataTrigger.Conditions>
                              <Setter Property="IsEnabled" Value="False" />
                            </MultiDataTrigger>
                          </Style.Triggers>
                        </Style>
                      </Button.Style>
                    </Button>
                    <Button Content="{x:Static Localisation:ResourcesCommon.Next}" Margin="5,0,0,0"
                            MinWidth="75" Click="AssistantControlNext_OnClick"
                            Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:AssistantControl}}}">
                      <Button.Style>
                        <Style TargetType="Button">
                          <Style.Triggers>
                            <DataTrigger
Binding="{Binding NextAllowed, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:AssistantControl}}}"
Value="False">
                              <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <MultiDataTrigger>
                              <MultiDataTrigger.Conditions>
                                <Condition
Binding="{Binding SelectedItem, Converter={StaticResource ObjectToTypeStringConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"
Value="AssistantTabItem" />
                                <Condition
Binding="{Binding SelectedItem.NextAllowed, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False" />
                              </MultiDataTrigger.Conditions>
                              <Setter Property="IsEnabled" Value="False" />
                            </MultiDataTrigger>
                          </Style.Triggers>
                        </Style>
                      </Button.Style>
                    </Button>
                  </StackPanel>
                  <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="5"
                              HorizontalAlignment="Right">
                    <!--<StackPanel.Style>
                                            <Style TargetType="StackPanel">
                                                <Setter Property="HorizontalAlignment" Value="Right" />
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding SelectedItem, Converter={StaticResource ObjectToTypeStringConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="AssistantTabItem" />
                                                            <Condition Binding="{Binding SelectedItem.IsSummaryPage, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="HorizontalAlignment" Value="Center" />
                                                    </MultiDataTrigger>
                                                    <DataTrigger Binding="{Binding IsNavigationButtonVisible, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:AssistantControl}}}" Value="True">
                                                        <Setter Property="HorizontalAlignment" Value="Center" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </StackPanel.Style>-->
                    <Button Content="{TemplateBinding OkButtonCaption}"
                            IsEnabled="{TemplateBinding OkButtonEnabled}" Margin="5,0,0,0" MinWidth="75" Click="AssistantControlOk_OnClick"
                            Visibility="{Binding OkButtonCaption, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ValueExistsToVisibilityConverter}}" />
                    <ItemsControl ItemsSource="{TemplateBinding Buttons}">
                      <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                          <StackPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                      </ItemsControl.ItemsPanel>
                    </ItemsControl>
                    <Button Content="{x:Static Localisation:ResourcesCommon.Cancel}"
                            Visibility="{TemplateBinding CancelButtonVisibility}" IsEnabled="{TemplateBinding CancelButtonEnabled}"
                            Margin="5,0,0,0" MinWidth="75" Click="AssistantControlCancel_OnClick" />
                  </StackPanel>
                </Grid>
              </Border>
              <Grid Grid.Column="1" Grid.Row="3">
                <Grid.Style>
                  <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                      <DataTrigger
Binding="{Binding ReplaceFooter, RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource ValueExistsToBoolConverter}}"
Value="True">
                        <Setter Property="Visibility" Value="Visible" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Grid.Style>
                <ItemsControl
ItemsSource="{Binding ReplaceFooter, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                </ItemsControl>
              </Grid>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:AvdMenuExpander}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="MinWidth" Value="60" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Margin" Value="2,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AvdMenuExpander}">
          <Grid VerticalAlignment="Center">
            <ToggleButton x:Name="Btn"
                          IsHitTestVisible="{Binding ElementName=Popup, Path=IsOpen, Mode=OneWay, Converter={StaticResource BoolInverter}}">
              <ToggleButton.Style>
                <Style TargetType="ToggleButton">
                  <Setter Property="Focusable" Value="False" />
                  <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                </Style>
              </ToggleButton.Style>
              <ToggleButton.Template>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                  <Border Name="border" BorderThickness="1" Padding="3,3,3,1"
                          BorderBrush="Transparent" CornerRadius="5" Background="Transparent">
                    <Grid VerticalAlignment="Center">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Image x:Name="image"
                             Height="{Binding RelativeSource={RelativeSource AncestorType=local:AvdMenuExpander}, Path=ImageHeight}"
                             Source="{Binding RelativeSource={RelativeSource AncestorType=local:AvdMenuExpander}, Path=ImageSource}"
                             HorizontalAlignment="Center" />
                      <StackPanel Grid.Row="1" HorizontalAlignment="Center"
                                  Orientation="Horizontal">
                        <TextBlock
Text="{Binding RelativeSource={RelativeSource AncestorType=local:AvdMenuExpander}, Path=Caption}"
Style="{StaticResource AvdMenuText}" VerticalAlignment="Center" />
                        <Path Margin="5,2,0,0" Fill="#E0E0E0" Data="M 0 0 H 8 L 4 4 Z"
                              VerticalAlignment="Center" />
                      </StackPanel>
                    </Grid>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter TargetName="border" Property="Background"
                              Value="{StaticResource AvdMenuButtonMouseOverBrush}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                      <Setter TargetName="border" Property="Background"
                              Value="{StaticResource AvdMenuButtonPressedBrush}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                      <Setter TargetName="border" Property="Opacity" Value="0.5" />
                      <Setter Property="Foreground" Value="Gray" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </ToggleButton.Template>
            </ToggleButton>
            <Popup x:Name="Popup" IsOpen="{Binding IsChecked, ElementName=Btn}" StaysOpen="False"
                   AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom" PlacementTarget="{Binding ElementName=Btn}">
              <Border>
                <Border.Style>
                  <Style TargetType="Border">
                    <Setter Property="Effect">
                      <Setter.Value>
                        <DropShadowEffect ShadowDepth="5" Opacity="0.5" BlurRadius="5" />
                      </Setter.Value>
                    </Setter>
                    <Setter Property="Background"
                            Value="{StaticResource GroupBoxBorderBackgroundBrush}" />
                    <Setter Property="BorderBrush"
                            Value="{StaticResource GroupBoxBorderBorderBrush}" />
                    <Setter Property="CornerRadius" Value="5" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="Margin" Value="0,0,5,5" />
                    <Setter Property="Padding" Value="5" />
                  </Style>
                </Border.Style>
                <StackPanel IsItemsHost="True" />
              </Border>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:AvdMenuButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="MinWidth" Value="60" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Margin" Value="2,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="local:AvdMenuButton">
          <Border Name="border" BorderThickness="1" Padding="3,3,3,1" BorderBrush="Transparent"
                  CornerRadius="5" Background="Transparent">
            <Grid VerticalAlignment="Center">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Image Grid.Row="1" Grid.Column="1" x:Name="content" Source="{TemplateBinding ImageSource}"
                     Height="{TemplateBinding ImageHeight}" Margin="2,0,2,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Image.Style>
                  <Style TargetType="Image">
                    <Style.Triggers>
                      <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.5"></Setter>
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </Image.Style>
              </Image>
              <TextBlock Text="{TemplateBinding Caption}" VerticalAlignment="Center" Margin="0,0,2,0"
                         TextWrapping="Wrap" MaxWidth="75" HorizontalAlignment="Center">
                <TextBlock.Style>
                  <Style TargetType="TextBlock" BasedOn="{StaticResource AvdMenuText}">
                    <Style.Triggers>
                      <DataTrigger
Binding="{Binding TextAllignment, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <DataTrigger.Value>
                          <local:TextAllignments>Top</local:TextAllignments>
                        </DataTrigger.Value>
                        <Setter Property="Grid.Row" Value="0" />
                        <Setter Property="Grid.Column" Value="1" />
                        <Setter Property="TextAlignment" Value="Center" />
                      </DataTrigger>
                      <DataTrigger
Binding="{Binding TextAllignment, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <DataTrigger.Value>
                          <local:TextAllignments>Bottom</local:TextAllignments>
                        </DataTrigger.Value>
                        <Setter Property="Grid.Row" Value="2" />
                        <Setter Property="Grid.Column" Value="1" />
                        <Setter Property="TextAlignment" Value="Center" />
                      </DataTrigger>
                      <DataTrigger
Binding="{Binding TextAllignment, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <DataTrigger.Value>
                          <local:TextAllignments>Left</local:TextAllignments>
                        </DataTrigger.Value>
                        <Setter Property="Grid.Row" Value="1" />
                        <Setter Property="Grid.Column" Value="0" />
                        <Setter Property="TextAlignment" Value="Right" />
                      </DataTrigger>
                      <DataTrigger
Binding="{Binding TextAllignment, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <DataTrigger.Value>
                          <local:TextAllignments>Right</local:TextAllignments>
                        </DataTrigger.Value>
                        <Setter Property="Grid.Row" Value="1" />
                        <Setter Property="Grid.Column" Value="2" />
                        <Setter Property="TextAlignment" Value="Left" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </TextBlock.Style>
              </TextBlock>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
              <Setter TargetName="border" Property="Background"
                      Value="{StaticResource AvdMenuButtonMouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background"
                      Value="{StaticResource AvdMenuButtonMouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background"
                      Value="{StaticResource AvdMenuButtonPressedBrush}" />
            </Trigger>
            <Trigger Property="IsDefaulted" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Opacity" Value="0.5" />
              <Setter Property="Foreground" Value="Gray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:AvdMenuSeparator}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AvdMenuSeparator}">
          <Image Source="/AvdWpfControls;component/Resources/AvdMenuSeparator.png" Height="62" Width="3"
                 Opacity="0.75" Stretch="Fill" Margin="5,0" VerticalAlignment="Center" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:HighlightableTextBlock}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:HighlightableTextBlock}">
          <Border>
            <Grid>
              <RichTextBox IsReadOnly="True" Padding="0" Margin="0" Background="Transparent"
                           BorderBrush="Transparent" BorderThickness="0" IsHitTestVisible="False">
                <RichTextBox.Style>
                  <Style TargetType="RichTextBox">
                    <Style.Triggers>
                      <DataTrigger
Binding="{Binding SingleLine, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                        <Setter Property="Visibility" Value="Collapsed" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </RichTextBox.Style>
                <FlowDocument>
                  <Paragraph>
                    <!-- do not linebreak the runs because that leads to a SPACE characer within these parts -->
                    <Run
Text="{Binding Prefix, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    <Run Text="{Binding HighlightedPart, RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="Red" />
                    <Run Text="{Binding Suffix, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                  </Paragraph>
                </FlowDocument>
              </RichTextBox>
              <StackPanel Orientation="Horizontal" Margin="5,0,0,0">
                <StackPanel.ToolTip>
                  <RichTextBox IsReadOnly="True" Padding="0" Margin="0" Background="Transparent"
                               BorderBrush="Transparent" BorderThickness="0" IsHitTestVisible="False" Width="600">
                    <FlowDocument>
                      <Paragraph>
                        <!-- do not linebreak the runs because that leads to a SPACE characer within these parts -->
                        <Run
Text="{Binding Prefix, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        <Run Text="{Binding HighlightedPart, RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="Red" />
                        <Run Text="{Binding Suffix, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </Paragraph>
                    </FlowDocument>
                  </RichTextBox>
                </StackPanel.ToolTip>
                <StackPanel.Style>
                  <Style TargetType="StackPanel">
                    <Style.Triggers>
                      <DataTrigger
Binding="{Binding SingleLine, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False">
                        <Setter Property="Visibility" Value="Collapsed" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </StackPanel.Style>
                <TextBlock
Text="{Binding Prefix, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <TextBlock Text="{Binding HighlightedPart, RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="Red" />
                <TextBlock Text="{Binding Suffix, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              </StackPanel>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:AvdSlideOutDialog}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AvdSlideOutDialog}">
          <Grid MouseEnter="AvdSlideOutDialogMouseEnter" MouseLeave="AvdSlideOutDialogMouseLeave">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Canvas Height="{TemplateBinding HeaderHeight}">
              <Canvas.Style>
                <Style TargetType="Canvas">
                  <Style.Triggers>
                    <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <DataTrigger.Value>
                        <local:HeaderPositions>TopLeft</local:HeaderPositions>
                      </DataTrigger.Value>
                      <Setter Property="Grid.Row" Value="0" />
                    </DataTrigger>
                    <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <DataTrigger.Value>
                        <local:HeaderPositions>TopRight</local:HeaderPositions>
                      </DataTrigger.Value>
                      <Setter Property="Grid.Row" Value="0" />
                    </DataTrigger>
                    <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <DataTrigger.Value>
                        <local:HeaderPositions>BottomLeft</local:HeaderPositions>
                      </DataTrigger.Value>
                      <Setter Property="Grid.Row" Value="2" />
                    </DataTrigger>
                    <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <DataTrigger.Value>
                        <local:HeaderPositions>BottomRight</local:HeaderPositions>
                      </DataTrigger.Value>
                      <Setter Property="Grid.Row" Value="2" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Canvas.Style>
              <Border x:Name="headerShadow" BorderBrush="Transparent" Background="White"
                      CornerRadius="{Binding ElementName=header, Path=CornerRadius}" Height="25"
                      Width="{Binding ElementName=header, Path=ActualWidth}" Canvas.Left="{Binding ElementName=header, Path=(Canvas.Left)}">
                <Border.Style>
                  <Style TargetType="Border">
                    <Style.Triggers>
                      <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <DataTrigger.Value>
                          <local:HeaderPositions>TopLeft</local:HeaderPositions>
                        </DataTrigger.Value>
                        <Setter Property="Border.Effect">
                          <Setter.Value>
                            <DropShadowEffect Direction="315" ShadowDepth="5" Opacity="0.6"
                                              BlurRadius="8" />
                          </Setter.Value>
                        </Setter>
                        <Setter Property="Margin" Value="0,-5,0,0" />
                        <Setter Property="BorderThickness" Value="0,1,1,0" />
                      </DataTrigger>
                      <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <DataTrigger.Value>
                          <local:HeaderPositions>TopRight</local:HeaderPositions>
                        </DataTrigger.Value>
                        <Setter Property="Border.Effect">
                          <Setter.Value>
                            <DropShadowEffect Direction="225" ShadowDepth="5" Opacity="0.6"
                                              BlurRadius="8" />
                          </Setter.Value>
                        </Setter>
                        <Setter Property="Margin" Value="0,-5,0,0" />
                        <Setter Property="BorderThickness" Value="1,0,0,1" />
                      </DataTrigger>
                      <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <DataTrigger.Value>
                          <local:HeaderPositions>BottomLeft</local:HeaderPositions>
                        </DataTrigger.Value>
                        <Setter Property="Border.Effect">
                          <Setter.Value>
                            <DropShadowEffect Direction="45" ShadowDepth="5" Opacity="0.6"
                                              BlurRadius="8" />
                          </Setter.Value>
                        </Setter>
                        <Setter Property="Margin" Value="0,0,0,-5" />
                        <Setter Property="BorderThickness" Value="0,1,1,0" />
                      </DataTrigger>
                      <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                        <DataTrigger.Value>
                          <local:HeaderPositions>BottomRight</local:HeaderPositions>
                        </DataTrigger.Value>
                        <Setter Property="Border.Effect">
                          <Setter.Value>
                            <DropShadowEffect Direction="135" ShadowDepth="5" Opacity="0.6"
                                              BlurRadius="8" />
                          </Setter.Value>
                        </Setter>
                        <Setter Property="Margin" Value="0,0,0,-5" />
                        <Setter Property="BorderThickness" Value="1,1,0,0" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Border.Style>
              </Border>
            </Canvas>
            <Canvas Grid.Row="1">
              <Border x:Name="content" Canvas.Left="{TemplateBinding CanvasLeft}"
                      Canvas.Top="{TemplateBinding CanvasTop}" Height="{TemplateBinding ContentHeight}"
                      Width="{TemplateBinding ContentWidth}">
                <Border Background="#FFE9E9F8" Padding="5">
                  <Border.Style>
                    <Style TargetType="Border">
                      <Style.Triggers>
                        <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                          <DataTrigger.Value>
                            <local:HeaderPositions>TopLeft</local:HeaderPositions>
                          </DataTrigger.Value>
                          <Setter Property="Border.Effect">
                            <Setter.Value>
                              <DropShadowEffect Direction="315" ShadowDepth="5"
                                                Opacity="0.6" BlurRadius="8" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="CornerRadius" Value="0,0,10,0" />
                        </DataTrigger>
                        <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                          <DataTrigger.Value>
                            <local:HeaderPositions>TopRight</local:HeaderPositions>
                          </DataTrigger.Value>
                          <Setter Property="Border.Effect">
                            <Setter.Value>
                              <DropShadowEffect Direction="225" ShadowDepth="5"
                                                Opacity="0.6" BlurRadius="8" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="CornerRadius" Value="0,0,0,10" />
                        </DataTrigger>
                        <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                          <DataTrigger.Value>
                            <local:HeaderPositions>BottomLeft</local:HeaderPositions>
                          </DataTrigger.Value>
                          <Setter Property="Border.Effect">
                            <Setter.Value>
                              <DropShadowEffect Direction="45" ShadowDepth="5"
                                                Opacity="0.6" BlurRadius="8" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="CornerRadius" Value="0,10,0,0" />
                        </DataTrigger>
                        <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                          <DataTrigger.Value>
                            <local:HeaderPositions>BottomRight</local:HeaderPositions>
                          </DataTrigger.Value>
                          <Setter Property="Border.Effect">
                            <Setter.Value>
                              <DropShadowEffect Direction="135" ShadowDepth="5"
                                                Opacity="0.6" BlurRadius="8" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="CornerRadius" Value="10,0,0,0" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </Border.Style>
                  <ContentPresenter ContentSource="Content" />
                </Border>
              </Border>
            </Canvas>
            <Canvas Height="{TemplateBinding HeaderHeight}">
              <Canvas.Style>
                <Style TargetType="Canvas">
                  <Style.Triggers>
                    <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <DataTrigger.Value>
                        <local:HeaderPositions>TopLeft</local:HeaderPositions>
                      </DataTrigger.Value>
                      <Setter Property="Grid.Row" Value="0" />
                    </DataTrigger>
                    <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <DataTrigger.Value>
                        <local:HeaderPositions>TopRight</local:HeaderPositions>
                      </DataTrigger.Value>
                      <Setter Property="Grid.Row" Value="0" />
                    </DataTrigger>
                    <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <DataTrigger.Value>
                        <local:HeaderPositions>BottomLeft</local:HeaderPositions>
                      </DataTrigger.Value>
                      <Setter Property="Grid.Row" Value="2" />
                    </DataTrigger>
                    <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                      <DataTrigger.Value>
                        <local:HeaderPositions>BottomRight</local:HeaderPositions>
                      </DataTrigger.Value>
                      <Setter Property="Grid.Row" Value="2" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Canvas.Style>
              <Border x:Name="header" CornerRadius="{TemplateBinding HeaderCornerRadius}"
                      Width="{TemplateBinding ContentWidth}" Height="{TemplateBinding HeaderHeight}"
                      Canvas.Left="{TemplateBinding CanvasLeft}" BorderBrush="{TemplateBinding HeaderBorderBrush}"
                      Background="{TemplateBinding HeaderBackground}">
                <Grid Margin="5,2">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Image Source="{TemplateBinding ImageSource}"
                         Height="{TemplateBinding ImageHeight}" VerticalAlignment="Center">
                    <Image.Style>
                      <Style TargetType="Image">
                        <Style.Triggers>
                          <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <DataTrigger.Value>
                              <local:HeaderPositions>TopLeft</local:HeaderPositions>
                            </DataTrigger.Value>
                            <Setter Property="Grid.Column" Value="1" />
                          </DataTrigger>
                          <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <DataTrigger.Value>
                              <local:HeaderPositions>TopRight</local:HeaderPositions>
                            </DataTrigger.Value>
                            <Setter Property="Grid.Column" Value="0" />
                          </DataTrigger>
                          <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <DataTrigger.Value>
                              <local:HeaderPositions>BottomLeft</local:HeaderPositions>
                            </DataTrigger.Value>
                            <Setter Property="Grid.Column" Value="1" />
                          </DataTrigger>
                          <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <DataTrigger.Value>
                              <local:HeaderPositions>BottomRight</local:HeaderPositions>
                            </DataTrigger.Value>
                            <Setter Property="Grid.Column" Value="0" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </Image.Style>
                  </Image>
                  <TextBlock Grid.Column="1" Text="{TemplateBinding Caption}"
                             VerticalAlignment="Center" Foreground="{TemplateBinding HeaderForeground}" FontWeight="Bold">
                    <TextBlock.Style>
                      <Style TargetType="TextBlock">
                        <Style.Triggers>
                          <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <DataTrigger.Value>
                              <local:HeaderPositions>TopLeft</local:HeaderPositions>
                            </DataTrigger.Value>
                            <Setter Property="TextAlignment" Value="Right" />
                            <Setter Property="Margin" Value="0,0,5,0" />
                          </DataTrigger>
                          <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <DataTrigger.Value>
                              <local:HeaderPositions>TopRight</local:HeaderPositions>
                            </DataTrigger.Value>
                            <Setter Property="TextAlignment" Value="Left" />
                            <Setter Property="Margin" Value="5,0,0,0" />
                          </DataTrigger>
                          <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <DataTrigger.Value>
                              <local:HeaderPositions>BottomLeft</local:HeaderPositions>
                            </DataTrigger.Value>
                            <Setter Property="TextAlignment" Value="Right" />
                            <Setter Property="Margin" Value="0,0,5,0" />
                          </DataTrigger>
                          <DataTrigger
Binding="{Binding HeaderPosition, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <DataTrigger.Value>
                              <local:HeaderPositions>BottomRight</local:HeaderPositions>
                            </DataTrigger.Value>
                            <Setter Property="TextAlignment" Value="Left" />
                            <Setter Property="Margin" Value="5,0,0,0" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </TextBlock.Style>
                  </TextBlock>
                </Grid>
              </Border>
            </Canvas>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:BulletItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:BulletItem}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <BulletDecorator>
              <BulletDecorator.Bullet>
                <Ellipse Margin=" 2, 0, 0, 0" Width="5" Height="5" Fill="Black" />
              </BulletDecorator.Bullet>
              <TextBlock Margin="10, 0, 0, 0" Text="{TemplateBinding Text}"
                         FontSize="{TemplateBinding FontSize}" TextWrapping="Wrap" />
            </BulletDecorator>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:AvdMenuExpanderItem}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AvdMenuExpanderItem}">
          <Border Name="border" BorderThickness="1" BorderBrush="Transparent" CornerRadius="5"
                  Background="Transparent" Padding="5">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Image Grid.RowSpan="2" Source="{TemplateBinding ImageSource}"
                     Height="{TemplateBinding ImageHeight}" Margin="0,0,10,0" VerticalAlignment="Center" />
              <TextBlock Grid.Column="1" Text="{TemplateBinding Caption}" FontWeight="Bold" />
              <TextBlock Grid.Column="1" Grid.Row="1" Text="{TemplateBinding Description}"
                         Margin="0,-2,0,0" TextWrapping="Wrap" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
              <Setter TargetName="border" Property="Background"
                      Value="{StaticResource TransparentOrangeGradientBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background"
                      Value="{StaticResource TransparentOrangeGradientBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background"
                      Value="{StaticResource OrangeGradientBrush}" />
            </Trigger>
            <Trigger Property="IsDefaulted" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Opacity" Value="0.5" />
              <Setter Property="Foreground" Value="Gray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:ImageCheckBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ImageCheckBox}">
          <Grid x:Name="MainGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Image x:Name="ImageChecked" Height="{TemplateBinding ImageHeight}"
                   Source="{TemplateBinding ImageSourceChecked}" Visibility="Hidden" />
            <Image x:Name="ImageUnchecked" Height="{TemplateBinding ImageHeight}"
                   Source="{TemplateBinding ImageSourceUnchecked}" Visibility="Hidden" />
            <ContentPresenter Grid.Row="1" x:Name="content" VerticalAlignment="Center"
                              HorizontalAlignment="Center" RecognizesAccessKey="True" />
          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="false">
              <Setter TargetName="ImageChecked" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="ImageUnchecked" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="MainGrid" Property="Effect">
                <Setter.Value>
                  <DropShadowEffect />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:AvdMenuCheckbox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AvdMenuCheckbox}">
          <Border Name="border" BorderThickness="1" Padding="3,3,3,1" BorderBrush="Transparent"
                  CornerRadius="5" Background="Transparent">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Image x:Name="ImageChecked" Height="{TemplateBinding ImageHeight}"
                     Source="{TemplateBinding ImageSourceChecked}" Visibility="Hidden" />
              <Image x:Name="ImageUnchecked" Height="{TemplateBinding ImageHeight}"
                     Source="{TemplateBinding ImageSourceUnchecked}" Visibility="Hidden" />
              <ContentPresenter Grid.Row="1" x:Name="content" VerticalAlignment="Center"
                                HorizontalAlignment="Center" RecognizesAccessKey="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="false">
              <Setter TargetName="ImageChecked" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="ImageUnchecked" Property="Visibility" Value="Visible" />
            </Trigger>
            <!--<Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource AvdMenuButtonMouseOverBrush}" />
                        </Trigger>-->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background"
                      Value="{StaticResource AvdMenuButtonMouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background"
                      Value="{StaticResource AvdMenuButtonPressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Opacity" Value="0.5" />
              <Setter Property="Foreground" Value="Gray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:TextboxWithDefaultText}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:TextboxWithDefaultText}">
          <Border Name="Border" CornerRadius="2" Padding="2"
                  Background="{StaticResource WindowBackgroundBrush}" BorderBrush="{StaticResource SolidBorderBrush}" BorderThickness="1">
            <Grid>
              <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
              <TextBlock Text="{TemplateBinding DefaultText}" IsHitTestVisible="False" Foreground="Gray"
                         FontStyle="Italic" FontSize="11">
                <TextBlock.Style>
                  <Style TargetType="TextBlock">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                      <DataTrigger
Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text}" Value="">
                        <Setter Property="Visibility" Value="Visible" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </TextBlock.Style>
              </TextBlock>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background"
                      Value="{StaticResource DisabledBackgroundBrush}" />
              <Setter TargetName="Border" Property="BorderBrush"
                      Value="{StaticResource DisabledBackgroundBrush}" />
              <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>