<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddKorrektionValue" xml:space="preserve">
    <value>Korrekturwert hinzufügen</value>
  </data>
  <data name="AssignedCorrectionIsSelectedIconTooltip" xml:space="preserve">
    <value>Korrektur gehört zum aktuell ausgewählten Korrekturdatensatz</value>
  </data>
  <data name="AuditMode" xml:space="preserve">
    <value>Betriebs-prüfungen</value>
  </data>
  <data name="AuditModeDescription" xml:space="preserve">
    <value>Im Betriebsprüfungsmodus haben Sie die Möglichkeit Korrekturen in bereits gesendeten Reports vorzunehmen um nachträgliche Änderungen aus Betriebsprüfungen erfassen. Hierbei haben Sie folgende Möglichkeiten:

1. Erfassen der Änderungen einzelner Positionen:
TODO

2. Erfassen von Änderungen in der Überleitung:
TODO</value>
  </data>
  <data name="AuditModeDialogCaption" xml:space="preserve">
    <value>Betriebsprüfungsmodus</value>
  </data>
  <data name="AuditModeTooltip" xml:space="preserve">
    <value>Betriebsprüfungsmodus</value>
  </data>
  <data name="CorrectionDatasets" xml:space="preserve">
    <value>Korrekturdatensätze</value>
  </data>
  <data name="CorrectionDatasetsInfo" xml:space="preserve">
    <value>Ein Korrekturdatensatz kann beliebig viele Wertekorrekturen aus Betriebsprüfungen enthalten und dient der Zusammenfasung inhaltlich zusammengehöriger Korrekturen.

Für Jeden Datensatz kann ein Kommentar angegeben werden um die Hintergründe für die Korrektur zu dokumentieren.</value>
  </data>
  <data name="DefaultName" xml:space="preserve">
    <value>Korrekturdatensatz</value>
  </data>
  <data name="DeleteCorrection" xml:space="preserve">
    <value>Korrektur "{0}" wirklich löschen? 

Mit dieser Aktion wird die Korrektur inklusive aller enthaltenen Korrekturbuchungen unwiederbringlich gelöscht!</value>
  </data>
  <data name="DeleteCorrectionCaption" xml:space="preserve">
    <value>Korrektur löschen?</value>
  </data>
  <data name="DeleteCorrectionTransaction" xml:space="preserve">
    <value>Korrekturbuchung für Position "{0}" wirklich löschen?</value>
  </data>
  <data name="DeleteCorrectionTransactionCaption" xml:space="preserve">
    <value>Korrekturbuchung löschen?</value>
  </data>
  <data name="ProgressCorrectionChecking" xml:space="preserve">
    <value>Korrektur "{0}" wird überprüft</value>
  </data>
  <data name="ElementIsDisabledOrComputed" xml:space="preserve">
    <value>"{0}" ist deaktiviert oder berechnet</value>
  </data>
  <data name="ProgressDocumentExecuting" xml:space="preserve">
    <value>Korrektur(en) für Report "{0}" überehmmen</value>
  </data>
  <data name="ProgressDocumentChecking" xml:space="preserve">
    <value>Korrektur(en) für Report "{0}" überprüfen</value>
  </data>
  <data name="TransferSuccessMessage" xml:space="preserve">
    <value>Die ausgewählten Korrekturen wurden erfolgreich für die ausgewählten Reports übernommen.</value>
  </data>
  <data name="ProblemEntryNoGaapPresentationTree" xml:space="preserve">
    <value>Kein Eintrag für das Element "{0}" in den GaapPresentationTrees gefunden.</value>
  </data>
  <data name="CheckProblemPdfHead" xml:space="preserve">
    <value>Übernehmen von Korrekturen auf Folgejahre - Probleme</value>
  </data>
  <data name="TransferMessageNoTransactionSelected" xml:space="preserve">
    <value>Keine Korrekturen ausgewählt.</value>
  </data>
  <data name="TransferMessageNoReportSelected" xml:space="preserve">
    <value>Kein Report ausgewählt</value>
  </data>
  <data name="ProgressDocumentLoading" xml:space="preserve">
    <value>Lade Report "{0}"</value>
  </data>
</root>