<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpfc="clr-namespace:AvdWpfControls;assembly=AvdWpfControls"
                    xmlns:Converters="clr-namespace:AvdWpfControls.Converters;assembly=AvdWpfControls"> 
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/AvdWpfStyles;component/Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Converters:BoolInverter x:Key="BoolInverter" />

    <LinearGradientBrush x:Key="AvdMenuButtonMouseOverBrush" StartPoint="0,0" EndPoint="0,1" >
        <GradientStop Color="#D0FFFFFF" Offset="0"/>
        <GradientStop Color="#40FFFFFF" Offset="0.15"/>
        <GradientStop Color="#40FFFFFF" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="AvdMenuButtonPressedBrush" StartPoint="0,0" EndPoint="0,1" >
        <GradientStop Color="#C0FFFFFF" Offset="0"/>
        <GradientStop Color="#80FFFFFF" Offset="0.15"/>
        <GradientStop Color="#80FFFFFF" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="AvdMenuText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="#E0E0E0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Normal" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"></Setter>
            </Trigger>

            <Trigger Property="Text" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="Text" Value="">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--border style for the group boxes -->
    <Style x:Key="GroupBoxBorderNoShadow" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource DefaultBorderBg}" />
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BorderBrush" Value="{StaticResource DefaultBorderBorder}" />
        <Setter Property="BorderThickness" Value="1"/>
    </Style>


    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15" Height="13" Background="Transparent">
                        <Path x:Name="ExpandPath" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="1,1,1,1" Fill="{StaticResource GlyphBrush}" Data="M 4 0 L 8 4 L 4 8 Z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 0 4 L 8 4 L 4 8 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HeaderImageButton" TargetType="{x:Type wpfc:ImageButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Width" Value="85"/>
        <Setter Property="ImageHeight" Value="24"/>
        <Setter Property="Foreground" Value="White"/>
        <!--<Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="11px"/>
        <Setter Property="FontWeight" Value="Bold"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpfc:ImageButton}">
                    <Border Name="border" BorderThickness="1" Padding="3,3,3,0"  CornerRadius="5" BorderBrush="Transparent" Background="Transparent" Height="52">
                        <Grid VerticalAlignment="Center">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Image x:Name="content" Source="{TemplateBinding ImageSource}" Height="{TemplateBinding ImageHeight}" />
                            <TextBlock Grid.Row="1" Text="{TemplateBinding Caption}" HorizontalAlignment="Center" Padding="0">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <Trigger Property="Text" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                        <Trigger Property="Text" Value="">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource HeaderButtonMouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource HeaderButtonMouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource HeaderButtonMouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.5" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                       
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" StrokeThickness="1" Stroke="#60000000" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxKey">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle"	Value="{StaticResource CheckBoxFocusVisual}"/>
        <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
                                        Width="13" Height="13" 
                                        CornerRadius="2" 
                                        Background="{StaticResource NormalBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}">
                                <Path Width="9" Height="9" 
                                          x:Name="CheckMark"
                                          SnapsToDevicePixels="False" 
                                          Stroke="Green"
                                          StrokeThickness="2"
                                          Data="M 2 5 L 4 8 L 8 1"/>
                            </Border>
                        </BulletDecorator.Bullet>

                        <ContentPresenter x:Name="content" 
                                              Margin="4,0,0,0"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Stretch"
                                              RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="content" Property="Margin" Value="0,0,0,0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 0 H 9 V 9 H 0 V 0" />
                            <Setter TargetName="CheckMark" Property="StrokeThickness" Value="0" />
                            <Setter TargetName="CheckMark" Property="Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
                                        <GradientStop Color="#FFC1D6FF" Offset="0"/>
                                        <GradientStop Color="#FF3737EF" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type wpfc:ThreeStateCheckBox}" BasedOn="{StaticResource CheckBoxKey}" />-->

    <!-- test style -->
    <Style x:Key="TogglePopupWithBg" TargetType="{x:Type wpfc:TogglePopup}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpfc:TogglePopup}">
                    <Border x:Name="Border" CornerRadius="2" BorderBrush="DarkGray" BorderThickness="1" Width="20">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                    <GradientBrush.GradientStops>
                                                        <GradientStopCollection>
                                                            <GradientStop Color="#EEE" Offset="0.0"/>
                                                            <GradientStop Color="#BBB" Offset="1.0"/>
                                                        </GradientStopCollection>
                                                    </GradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#FFF" Offset="0.0"/>
                                        <GradientStop Color="#CCC" Offset="1.0"/>
                                    </GradientStopCollection>
                                </GradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Grid>
                            <ToggleButton x:Name="Btn" IsHitTestVisible="{Binding ElementName=Popup, Path=IsOpen, Mode=OneWay, Converter={StaticResource BoolInverter}}">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Image x:Name="image" Height="{Binding RelativeSource={RelativeSource AncestorType=wpfc:TogglePopup}, Path=ImageHeight}" Source="{Binding RelativeSource={RelativeSource AncestorType=wpfc:TogglePopup}, Path=ImageSource}" Margin="2,0,2,0">
                                            <Image.Style>
                                                <Style TargetType="Image">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" Value="0.5"></Setter>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Image.Style>
                                        </Image>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>

                            <Popup x:Name="Popup" IsOpen="{Binding IsChecked, ElementName=Btn}" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Fade"
                                                            Placement="MousePoint" HorizontalOffset="5" VerticalOffset="5">
                                <ContentPresenter x:Name="content" Content="{TemplateBinding Content}" />
                            </Popup>

                        </Grid>
                        <!-- try to focus content on popup view (does not yet work) -->
                        <!--<ControlTemplate.Triggers>
                        <Trigger SourceName="Btn" Property="IsChecked" Value="True">
                            <Setter TargetName="Popup" Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="content" Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    
    <Style x:Key="PopupBorder" TargetType="Border">
        <Setter Property="Margin" Value="10,0,15,15" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="5" Direction="315" Opacity="0.9"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonBorder" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#edb75f" Offset="0" />
                    <GradientStop Color="#b77401" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SelectedBalanceListEntry" TargetType="{x:Type ListBoxItem}">
        <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0"/>
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
        </Style.Resources>
    </Style>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0,0,0,0" StrokeThickness="5" Stroke="Black" StrokeDashArray="1 2" Opacity="0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AccountGroupTreeViewStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="IsSelected" Value="{Binding RelativeSource={RelativeSource Self}, Path=Header.IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        <!--<Setter Property="IsExpanded" Value="{Binding RelativeSource={RelativeSource Self}, Path=Header.IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
    <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource Self}, Path=Header.IsVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource TrueIsVisibleConverter}}"/>-->
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton 
                                x:Name="Expander" 
                                Style="{StaticResource ExpandCollapseToggleStyle}" 
                                IsChecked="{Binding Path=IsExpanded, 
                                RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press"/>
                        <Border Name="Bd"
                                  Grid.Column="1"
                                  Background="{TemplateBinding Background}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}"
                                  Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header"
                                    ContentSource="Header"
                                    HorizontalAlignment="Stretch"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Width" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Height" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>