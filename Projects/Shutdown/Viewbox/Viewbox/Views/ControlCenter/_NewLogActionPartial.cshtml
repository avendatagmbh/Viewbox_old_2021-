@using Viewbox
@using Viewbox.Job
@using Viewbox.Models
@using Viewbox.Properties
@model ViewboxDb.NewLogAction
@helper CreateContent(ViewboxDb.NewLogAction action, DateTime parentTime, int depth = 0, bool list = false)
{
    if (action.Rightsmode)
    {
    }
    else
    {
        switch (action.ActionController)
        {
            case ViewboxDb.NewLogActionControllers.AccountLogOn:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@String.Format(Resources.Opened, "\"" + Resources.Account + "\"")</a></div>
                                <div>
                                    @foreach (var sub in action.SubActions)
                                    {<text>@CreateContent(sub, action.Timestamp, depth + 1)</text>
                                    }
                                </div>
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                    else
                    {
                        if (action.ActionParameters.ContainsKey("model"))
                        {
                            var logOnModel = action.ActionParameters["model"] as LogOnModel;
                            if (logOnModel != null)
                            {
                                var user = ViewboxApplication.ByUserName(logOnModel.UserName);
                                if (user != null)
                                {
                                    if (user.CheckPassword(logOnModel.Password))
                                    {
                                        <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.LoggedIn, user.Name)</a></div>
                                    }
                                    else
                                    {
                                        <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @Resources.LoginFailed</a></div>
                                    }
                                }
                                else
                                {
                                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @Resources.LoginFailed</a></div>
                                }
                            }
                        }
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridExecuteIssue:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                @if (action.ActionParameters.ContainsKey("id"))
                                {
                                    int id = action.ActionParameters["id"] != null ? (int) action.ActionParameters["id"] : 0;
                                    if (id > 0)
                                    {
                                        <div class="without"><a>@String.Format(Resources.StartExecuteIssueNewLog, ViewboxSession.GetTableDescription(id))</a></div>
                                    }
                                    else
                                    {
                                        <div class="without"><a>@String.Format(Resources.ExecuteIssueFailedId, id)</a></div>
                                    }
                                }
                                else
                                {
                                    <div class="without"><a>@String.Format(Resources.ExecuteIssueFailed)</a></div>
                                }
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                    else
                    {
                        if (action.ActionParameters.ContainsKey("page"))
                        {
                            var page = (int) action.ActionParameters["page"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.BrowsedToPage, page + 1)</a></div>
                        }
                        if (action.SizeChanged)
                        {
                            var size = (int) action.ActionParameters["size"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ChangedDisplaySize, size)</a></div>
                        }
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridGroup:
                {
                    if (action.ActionParameters.ContainsKey("id") && action.ActionParameters.ContainsKey("colIds") && action.ActionParameters["colIds"] != null && action.ActionParameters.ContainsKey("aggfunc") && action.ActionParameters["aggfunc"] != null)
                    {
                        int id = action.ActionParameters["id"] != null ? (int) action.ActionParameters["id"] : 0;
                        List<String> colIds = action.ActionParameters["colIds"].ToString().Split(',').ToList();
                        List<String> aggs = action.ActionParameters["aggfunc"].ToString().Split(',').ToList();
                        var func = String.Join(",", from agg in aggs select agg);
                        var aggText = aggs.Count > 0 ? aggs.Count > 1 ? String.Format(Resources.WithFunctions, func) : String.Format(Resources.WithFunction, func) : "";

                        if (colIds.Count > 0)
                        {
                            var cols = String.Join(",", from column in colIds select ViewboxSession.GetColumnDescription(Int32.Parse(column)));
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.StartGroup, cols, aggText)</a></div>
                        }
                        else
                        {
                            <div class="without2"><a>@String.Format(Resources.GroupFailedId, id)</a></div>
                        }
                    }
                    else
                    {
                        <div class="without2"><a>@String.Format(Resources.GroupFailed)</a></div>
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridIndex:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                @if (action.ActionParameters.ContainsKey("id"))
                                {
                                    int id = action.ActionParameters["id"] != null ? (int) action.ActionParameters["id"] : 0;
                                    if (id != 0)
                                    {
                                        <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@if (id > 0)
                                                                                                              {<text>@String.Format(Resources.OpenedNewLog, ViewboxSession.GetTableDescription(id))</text>
                                                                                                              }
                                                                                                              else
                                                                                                              {<text>@String.Format(Resources.OpenedTempTableNewLog)</text>
                                                                                                              }</a></div>
                                        <div>
                                            @foreach (var sub in action.SubActions)
                                            {<text>@CreateContent(sub, action.Timestamp, depth + 1)</text>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="without"><a>@String.Format(Resources.OpenFailedId, id)</a></div>
                                    }
                                }
                                else
                                {
                                    <div class="without"><a>@String.Format(Resources.OpenFailed)</a></div>
                                }
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                    else
                    {
                        if (action.ActionParameters.ContainsKey("page"))
                        {
                            var page = (int) action.ActionParameters["page"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.BrowsedToPage, page + 1)</a></div>
                        }
                        if (action.SizeChanged)
                        {
                            var size = (int) action.ActionParameters["size"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ChangedDisplaySize, size)</a></div>
                        }
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridJoin:
                {
                    if (action.ActionParameters.ContainsKey("id"))
                    {
                        int id = action.ActionParameters["id"] != null ? (int) action.ActionParameters["id"] : 0;
                        if (id != 0)
                        {
                            List<String> temp = new List<string>();
                            foreach (ViewboxDb.JoinColumns col in action.ActionParameters["columns"] as List<ViewboxDb.JoinColumns>)
                            {
                                temp.Add(ViewboxSession.GetColumnDescription(col.Column1) + " -> (" + ViewboxSession.GetTableDescription((int) action.ActionParameters["joinTableId"]) + ") " + ViewboxSession.GetColumnDescription(col.Column2));
                            }
                            <div class="without2"><a>@String.Format(Resources.StartJoin, ViewboxSession.GetTableDescription((int) action.ActionParameters["joinTableId"]), String.Join(",", temp.ToArray()))</a></div>
                        }
                        else
                        {
                            <div class="without2"><a>@String.Format(Resources.JoinFailedId, id)</a></div>
                        }
                    }
                    else
                    {
                        <div class="without2"><a>@Resources.JoinFailed</a></div>
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridSortAndFilter:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                @if (action.ActionParameters.ContainsKey("id"))
                                {
                                    int id = action.ActionParameters["id"] != null ? (int) action.ActionParameters["id"] : 0;
                                    if (id != 0)
                                    {
                                        var sort = action.ActionParameters["sortList"] as ViewboxDb.SortCollection;
                                        String filter = action.ActionParameters["filter"] as string;
                                        <div class="extended"><a><span>@String.Format(Resources.TableWithId, id)</span></a></div>
                                        <div>
                                            @if (sort != null)
                                            {
                                                <text><div class="without2"><a>@if (id > 0)
                                                                               {<text>@String.Format(Resources.StartSortNewLog, ViewboxSession.GetTableDescription(id))</text>
                                                                               }
                                                                               else
                                                                               {<text>@String.Format(Resources.OpenedTempTableNewLog)</text>
                                                                               }
                                                                            </a></div></text>
                                            } 
                                            @if (filter != "")
                                            {
                                                <text><div class="without2"><a>@String.Format(Resources.StartFilter, ViewboxSession.FormatFilter(filter))</a></div></text>
                                            }
                                            @foreach (var sub in action.SubActions)
                                            {<text>@CreateContent(sub, action.Timestamp, depth + 1)</text>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="without"><a>@String.Format(Resources.OpenFailedId, id)</a></div>
                                    }
                                }
                                else
                                {
                                    <div class="without"><a>@String.Format(Resources.OpenFailed)</a></div>
                                }
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                    else
                    {
                        if (action.ActionParameters.ContainsKey("id"))
                        {
                            int id = action.ActionParameters["id"] != null ? (int) action.ActionParameters["id"] : 0;
                            if (id != 0)
                            {
                                var sort = action.ActionParameters["sortList"] as ViewboxDb.SortCollection;
                                String filter = action.ActionParameters["filter"] as string;
                                if (sort != null && !action.ActionParameters.ContainsKey("page") && !action.SizeChanged)
                                {
                                    <text><div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.StartSort,
                                                                                 String.Join(",", from sortItem in sort
                                                                                                  select ViewboxSession.GetColumnDescription(sortItem.cid) + (sortItem.dir == ViewboxDb.SortDirection.Ascending ? " " + Resources.Ascending : " " + Resources.Descending))
                                                                       )</a></div></text>
                                }
                                if (filter != "" && filter != null && !action.ActionParameters.ContainsKey("page") && !action.SizeChanged)
                                {
                                    <text><div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.StartFilter, ViewboxSession.FormatFilter(filter))</a></div></text>
                                }
                            }
                            else
                            {
                                <div class="without"><a>@String.Format(Resources.SortAndFilterFailedId, id)</a></div>
                            }
                        }
                        else
                        {
                            <div class="without"><a>@String.Format(Resources.SortAndFilterFailed)</a></div>
                        }
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridUpdateColumn:
                {
                    if (action.ActionParameters.ContainsKey("id") && action.ActionParameters.ContainsKey("is_visible"))
                    {
                        int id = (int) action.ActionParameters["id"];
                        bool is_visible = (bool) action.ActionParameters["is_visible"];
                        <div class="without2"><a>  
                                                  @CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SetColumnVisibility, ViewboxSession.GetColumnDescription(id), " ", is_visible ? Resources.Visible.ToLower() : Resources.Invisible.ToLower())
                                              </a></div>
                        /*var column = Viewbox.ViewboxSession.Columns[id];
                        bool is_visible = (bool)action.ActionParameters["is_visible"];
                        if(column != null) {
                            var table = column.Table;
                            var tableName = table.GetDescription(ViewboxSession.Language);
                        <div class="without2"><a>  
                            @CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SetColumnVisibility, column.Name,
                                                                                        list ? " " + String.Format(Resources.InTable, tableName) + " " : "",
                                                                                        is_visible ? Resources.Visible.ToLower() : Resources.Unvisible.ToLower()) 
                        </a></div>
                        }*/
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.DocumentsIndex:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@String.Format(Resources.Opened, "\"" + Resources.DocumentArchive + "\"")</a></div>
                                @for (int i = action.SubActions.Count - 1; i >= 0; i--)
                                {<text>@CreateContent(action.SubActions[i], action.Timestamp, depth + 1)</text>
                                }
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.TableListIndex:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                @{
                                    <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@String.Format(Resources.Opened, "\"" + Resources.Tables + "\"")</a></div>
                                    <div>
                                        @foreach (var sub in action.SubActions)
                                        {<text>@CreateContent(sub, action.Timestamp, depth + 1, true)</text>
                                        }
                                    </div>
                                }
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                    else
                    {
                        if (action.ActionParameters["search"] != null && (action.ActionParameters["search"] as string) != "")
                        {
                            var search = action.ActionParameters["search"] as string;
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SearchedFor, search)</a></div>
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            if (page == 0 && (action.ActionParameters["showEmpty"] != null && (bool) action.ActionParameters["showEmpty"]))
                            {
                                <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SwitchedToTab, "\"" + String.Format(Resources.EmptyTables, Resources.Tables) + "\"")</a></div>
                            }
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            if (page == 0 && (action.ActionParameters["showHidden"] != null && (bool) action.ActionParameters["showHidden"]))
                            {
                                <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SwitchedToTab, "\"" + String.Format(Resources.HiddenTableObjects, Resources.Tables) + "\"")</a></div>
                            }
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            if (page == 0 && (action.ActionParameters["showHidden"] != null && (bool) action.ActionParameters["showArchived"]))
                            {
                                <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SwitchedToTab, "\"" + String.Format(Resources.ArchivedTableObjects, Resources.Tables) + "\"")</a></div>
                            }
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.BrowsedToPage, page + 1)</a></div>
                        }
                        if (action.SizeChanged)
                        {
                            var size = (int) action.ActionParameters["size"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ChangedDisplaySize, size)</a></div>
                        }
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.ViewListIndex:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                @{
                                    <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@String.Format(Resources.Opened, "\"" + Resources.Views + "\"")</a></div>
                                    <div>
                                        @foreach (var sub in action.SubActions)
                                        {<text>@CreateContent(sub, action.Timestamp, depth + 1, true)</text>
                                        }
                                    </div>
                                }
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                    else
                    {
                        if (action.ActionParameters["search"] != null && (action.ActionParameters["search"] as string) != "")
                        {
                            var search = action.ActionParameters["search"] as string;
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SearchedFor, search)</a></div>
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            if (page == 0 && (action.ActionParameters["showEmpty"] != null && (bool) action.ActionParameters["showEmpty"]))
                            {
                                <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SwitchedToTab, "\"" + String.Format(Resources.EmptyTables, Resources.Views) + "\"")</a></div>
                            }
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            if (page == 0 && (action.ActionParameters["showHidden"] != null && (bool) action.ActionParameters["showHidden"]))
                            {
                                <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SwitchedToTab, "\"" + String.Format(Resources.HiddenTableObjects, Resources.Views) + "\"")</a></div>
                            }
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            if (page == 0 && (action.ActionParameters["showHidden"] != null && (bool) action.ActionParameters["showArchived"]))
                            {
                                <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SwitchedToTab, "\"" + String.Format(Resources.ArchivedTableObjects, Resources.Views) + "\"")</a></div>
                            }
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.BrowsedToPage, page + 1)</a></div>
                        }
                        if (action.SizeChanged)
                        {
                            var size = (int) action.ActionParameters["size"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ChangedDisplaySize, size)</a></div>
                        }
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.IssueListIndex:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                @{
                                    <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@String.Format(Resources.Opened, "\"" + Resources.Issues + "\"")</a></div>
                                    <div>
                                        @foreach (var sub in action.SubActions)
                                        {<text>@CreateContent(sub, action.Timestamp, depth + 1, true)</text>
                                        }
                                    </div>
                                }
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                    else
                    {
                        if (action.ActionParameters["search"] != null && (action.ActionParameters["search"] as string) != "")
                        {
                            var search = action.ActionParameters["search"] as string;
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SearchedFor, search)</a></div>
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            if (page == 0 && (action.ActionParameters["showHidden"] != null && (bool) action.ActionParameters["showHidden"]))
                            {
                                <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SwitchedToTab, "\"" + String.Format(Resources.HiddenTableObjects, Resources.Issues) + "\"")</a></div>
                            }
                        }
                        if (action.ActionParameters["page"] != null)
                        {
                            var page = (int) action.ActionParameters["page"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.BrowsedToPage, page + 1)</a></div>
                        }
                        if (action.SizeChanged)
                        {
                            var size = (int) action.ActionParameters["size"];
                            <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ChangedDisplaySize, size)</a></div>
                        }
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpIndex:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                @{
                                    <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@String.Format(Resources.Opened, "\"" + Resources.Help + "\"")</a></div>
                                    <div>
                                        @foreach (var sub in action.SubActions)
                                        {<text>@CreateContent(sub, action.Timestamp, depth + 1, true)</text>
                                        }
                                    </div>
                                }
                            </td>
                            <td class="text-right delete column-right">
                                <a href="@Url.Action("Hide", new {id = action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.Overview + "\"")</a></div>
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpAbout:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.AboutHelp + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpTableList:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.Tables + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpIssueList:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.Issues + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpViewList:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.Views + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpDocuments:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.DocumentArchive + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpControlCenter:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.ControlCenter + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpExport:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.Export + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpSettings:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.Settings + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.HelpFaq:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Shown, "\"" + Resources.FAQ + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.SettingsIndex:
                {
                    if (depth == 0)
                    {
                        <tr>
                            <td class="column-left">@action.Timestamp</td>
                            <td>
                                @{
                                    <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@String.Format(Resources.Opened, "\"" + Resources.Settings + "\"")</a></div>
                                    <div>
                                        @foreach (var sub in action.SubActions)
                                        {<text>@CreateContent(sub, action.Timestamp, depth + 1, true)</text>
                                        }
                                    </div>
                                }
                            </td>
                            <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                        </tr>
                    }
                    else if (action.ActionParameters != null && action.ActionParameters.Count > 0)
                    {
                        <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Changed, "\"" + Resources.Settings + "\"")</a></div>
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.SettingsPersonal:
                {
                    <div class="without2"><a>
                                              @CreateTime2(action.Timestamp, parentTime) @String.Format(action.ActionParameters != null && action.ActionParameters.Count > 0 ? Resources.Changed : Resources.Opened, "\"" + Resources.PersonalSettings + "\"")
                                          </a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.SettingsRights:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.Opened, "\"" + Resources.UserManagement + "\"")</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.ExportIndex:
                {
                    <tr>
                        <td class="column-left">@action.Timestamp</td>
                        <td>
                            @{
                                <div class=@(action.SubActions.Count > 0 ? "extended" : "without")><a>@String.Format(Resources.Opened, "\"" + Resources.Export + "\" " + Resources.With + " \"" + action.ActionParameters["type"] + "\" " + Resources.List)</a></div>
                                <div>
                                    @foreach (var sub in action.SubActions)
                                    {<text>@CreateContent(sub, action.Timestamp, depth + 1, true)</text>
                                    }
                                </div>
                            }
                        </td>
                        <td class="text-right delete column-right"><a href="@Url.Action("Hide", new {action.Id, userId = action.UserId, ViewBag.filterDate, ViewBag.showHidden})">@(ViewBag.showHidden ? Resources.Show : Resources.Hide)</a></td>
                    </tr>
                }
                break;
            case ViewboxDb.NewLogActionControllers.ExportStart:
                {
                    string type = ((ViewboxDb.ExportType) action.ActionParameters["type"]).ToString();
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ExportStart, type)</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.ExportMassExport:
                {
                    string type = ((ViewboxDb.ExportType) action.ActionParameters["type"]).ToString();
                    string exports = action.ActionParameters["exports"].ToString();
                    List<String> objects = ViewboxSession.GetDataOfMassExport(exports);
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) 
                                              @(objects.Count > 1 ? String.Format(Resources.ExportMassExport, type, objects.Count) : String.Format(Resources.ExportSingleExport, type, objects.First()))
                                          </a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.ExportDownload:
                {
                    string key = action.ActionParameters["key"] as string;
                    var job = Export.Find(key);
                    if (job != null)
                    {
                        <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ExportDownload, job.Descriptions[ViewboxSession.Language.CountryCode])</a></div>
                    }
                    else
                    {
                        <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.NewLogExportDownload, key)</a></div>
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.ExportCancelJob:
                {
                    string key = action.ActionParameters["key"] as string;
                    var job = Export.Find(key);
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ExportCancelJob, job.Descriptions[ViewboxSession.Language.CountryCode])</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridFilter:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.StartFilter, ViewboxSession.FormatFilter(String.Format("Equal(%{0},\"{1}\")", action.ActionParameters["column"], (action.ActionParameters["filter"] as string))))</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.ExportTableObjects:
                {
                    if (action.ActionParameters["search"] != null && (action.ActionParameters["search"] as string) != "")
                    {
                        var search = action.ActionParameters["search"] as string;
                        <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.SearchedFor, search)</a></div>
                    }
                    if (action.ActionParameters["page"] != null)
                    {
                        var page = (int) action.ActionParameters["page"];
                        <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.BrowsedToPage, page + 1)</a></div>
                    }
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridSort:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.StartSort, ViewboxSession.GetColumnDescription((int) action.ActionParameters["id"]) + ((((ViewboxDb.SortDirection) action.ActionParameters["direction"]) == ViewboxDb.SortDirection.Ascending) ? " " + Resources.Ascending : " " + Resources.Descending))</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridUpdateColumnOrder:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ColumnOrderChanged, ViewboxSession.GetColumnDescription((int) action.ActionParameters["columnId"]))</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridSaveColumnSizes:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.ColumnSizesChanged, ViewboxSession.GetTableDescription((int) action.ActionParameters["id"]))</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridTransactionNumberChange:
                {
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @String.Format(Resources.TransactionIdChangedTo, action.ActionParameters["transactionNumber"])</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridDeleteRelations:
                {
                    int count = action.ActionParameters["relations"].ToString().Split(',').Count();
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime) @(count == 0 ? Resources.NoRelationsDeleted : (count > 1 ? String.Format(Resources.RelationsDeleted, count) : Resources.OneRelationDeleted))</a></div>
                }
                break;
            case ViewboxDb.NewLogActionControllers.DataGridRelations:
                {
                    List<String> temp = new List<string>();
                    <div class="without2"><a>@CreateTime2(action.Timestamp, parentTime)  
                       
                                              @foreach (ViewboxDb.JoinColumns col in action.ActionParameters["columns"] as List<ViewboxDb.JoinColumns>)
                                              {
                                                  temp.Add(ViewboxSession.GetColumnDescription(col.Column1) + "-> (" + ViewboxSession.GetTableDescription((int) action.ActionParameters["joinTableId"]) + ") " + ViewboxSession.GetColumnDescription(col.Column2));
                                              }
                                              @String.Format(Resources.RelationAdded, String.Join(",", temp.ToArray()))
                                          </a></div>
                }
                break;
        }
    }
}
@helper CreateTime(DateTime timestamp)
{
    var time = DateTime.Now.Subtract(timestamp);

    <div class="time">
        @if (time < TimeSpan.FromMinutes(1))
        {
            <span>@Resources.Seconds</span>
            @time.Seconds
        }
        else if (time < TimeSpan.FromHours(1))
        {
            <span>@Resources.Minutes</span>
            @time.Minutes
        }
        else
        {
            <span>@Resources.Hours</span>
            @time.Hours
        }
    </div>
}
@helper CreateTime2(DateTime timestamp1, DateTime timestamp2)
{
    var time = timestamp1.Subtract(timestamp2);
    if (time < TimeSpan.FromMinutes(1))
    {<text>@String.Format(Resources.Later + ":", time.Seconds + Resources.Seconds)</text>
    }
    else if (time < TimeSpan.FromHours(1))
    {<text>@String.Format(Resources.Later + ":", time.Minutes + Resources.Minutes)</text>
    }
    else
    {<text>@String.Format(Resources.Later + ":", time.Hours + Resources.Hours)</text>
    }
}
@CreateContent(Model, Model.Timestamp)