@using Viewbox
@using Viewbox.Properties
@using Viewbox.Models
@model DataGridModel
@helper PrintNodes(IEnumerable<StructuedTableModel.Node> list, int maxValueCount)
{
    foreach (var node in list)
    {
        var children = new List<StructuedTableModel.Node>(node.Children);
        <div class="clear"></div>
        var classname = "tree-node" + (children.Count > 0 ? " closed" : String.Empty);
        var valueclass = (node.Type == StructuedTableModel.NodeType.Structure ? "dcw-structure" : "dcw-account");// +(node.Value(i) < 0 ? " negative" : String.Empty);
        <div class="@classname">
            <div class="@valueclass">
                <div class="node-descr">@node.Description</div>
                @if (maxValueCount > 0 || Model.StructuedTable.IssueFlag == 8)
                {
                    if (Model.StructuedTable.IssueFlag == 5)
                    {
                        string val1 = (((double)node.Value(1)).ToString("#,0.00"));
                        string val2 = (((double)node.Value(0)).ToString("#,0.00"));
                        string diff = StructuedTableModel.GetRelativeDiff(val2, val1);
                       <div class="balance-value right">@diff</div>
                       <div class="balance-value right">@val1</div>
                       <div class="balance-value right">@val2</div>
                    }
                    
                    else
	                {
                        for (int i = maxValueCount-1; i >= 0; i--)
                        {
                            @*<div class="balance-value right">@(((double)node.Value(i)).ToString("#,0.00"))</div>*@
                            <div class="balance-value right">@(node.Value(i).ToString("#,0.00"))</div>
                        }
	                }
                }
            </div>
            @PrintNodes(children, maxValueCount)
        </div>
    }
}
<div class="table-container balance-container">
    @{
        var list = Model.StructuedTable.TreeRoot.Children;
    }
    <div class="balance-parameters left">
        <div class="balance-parameter left">
            <div class="balance-parameter-name left">@Model.DataGridNameDescription() :</div>
            <div class="left">@Model.TableInfo.GetDescription()</div>
        </div>
        @foreach (var par in Model.StructuedTable.GetParameters())
        {
            <div class="balance-parameter left">
                <div class="balance-parameter-name left">@par.Item1 :</div>
                <div class="left">@par.Item2</div>
            </div>
        }
    </div>
    <div class="clear">
    </div>
    <div class="balance-header">
        <div class="left">@Resources.Konto_structure</div>
        <div class="balance-scroll-header right">&nbsp;</div>
        @foreach (string col in Model.StructuedTable.ColumnNameList)
        {
            <div class="balance-value right">@col</div>
        }
        @*<div class="balance-value right">@Resources.Saldo_Year</div>
            <div class="balance-value right">@Resources.Saldo_Month</div>
            <div class="balance-value right">@Resources.Konto_Number</div>*@
    </div>
    <div class="clear">
    </div>
    <div class="balance-view scroll">
        @if (list.Any())
        {
            @PrintNodes(list, Model.StructuedTable.MaximumValueCount);
        }
        else
        {
            <div class="no-data-balance">Model.LabelNoData</div>
        }
    </div>
</div>