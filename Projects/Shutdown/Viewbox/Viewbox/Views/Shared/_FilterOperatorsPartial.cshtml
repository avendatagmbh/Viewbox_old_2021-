@using Viewbox
@using Viewbox.Properties
@using ViewboxDb.Filters
@model Object
           
@{
    var commandDictionary = new Dictionary<Operator, Dictionary<string, string>>
    {
        {Operator.And, new Dictionary<string, string> {{"Symbol", "&"}, {"TooltipText", Resources.AndFilter}, {"OpCommand", "And("}, {"OpText1", Resources.And},}},
        {Operator.Or, new Dictionary<string, string> {{"Symbol", "v"}, {"TooltipText", Resources.OrFilter}, {"OpCommand", "Or("}, {"OpText1", Resources.Or},}},
        {Operator.Greater, new Dictionary<string, string> {{"Symbol", ">"}, {"TooltipText", Resources.GreaterFilter}, {"OpCommand", "Greater("},}},
        {Operator.GreaterOrEqual, new Dictionary<string, string> {{"Symbol", "≥"}, {"TooltipText", Resources.GreaterOrEqualFilter}, {"OpCommand", "GreaterOrEqual("},}},
        {Operator.Less, new Dictionary<string, string> {{"Symbol", "<"}, {"TooltipText", Resources.LessFilter}, {"OpCommand", "Less("},}},
        {Operator.LessOrEqual, new Dictionary<string, string> {{"Symbol", "≤"}, {"TooltipText", Resources.LessOrEqualFilter}, {"OpCommand", "LessOrEqual("},}},
        {Operator.Equals, new Dictionary<string, string> {{"Symbol", "="}, {"TooltipText", Resources.EqualFilter}, {"OpCommand", "Equal("},}},
        {Operator.Like, new Dictionary<string, string> {{"Symbol", "≈"}, {"TooltipText", Resources.LikeFilter}, {"OpCommand", "Like("},}},
        {Operator.NotEquals, new Dictionary<string, string> {{"Symbol", "≠"}, {"TooltipText", Resources.NotEqualFilter}, {"OpCommand", "NotEqual("},}},
        {Operator.StartsWith, new Dictionary<string, string> {{"Symbol", "=|"}, {"TooltipText", Resources.StartsWithFilter}, {"OpCommand", "StartsWith("},}}
    };
}
<!-- _FilterOperatorsPartial.cshtml -->
@foreach (var op in new List<Operator>
                                          {
                                              Operator.And,
                                              Operator.Or,
                                              Operator.Less,
                                              Operator.LessOrEqual,
                                              Operator.Greater,
                                              Operator.GreaterOrEqual,
                                              Operator.Between,
                                              Operator.Equals,
                                              Operator.NotEquals,
                                              Operator.In,
                                              Operator.Like,
                                              Operator.StartsWith
                                          })
{
    @Html.Raw("<div class=\"" + op.ToString().ToLower() + "-operator hide\">")
    switch (op)
    {
        case Operator.Or:
        case Operator.And:
            {
                Dictionary<string, string> text = commandDictionary[op];
                <span class="op-command">@text["OpCommand"]</span>

                <div>Alle Bedingungen müssen erfüllt sein</div>
                <ul style="position: relative"><li class="placeholder_new_condition filter-tree-li"><div class="op-dock optional drop-condition">Hier Bedingung hinziehen</div></li></ul>
                <span class="op-command">)</span>
            }
            break;
        case Operator.NotEquals:
        case Operator.Like:
        case Operator.Equals:
        case Operator.Less:
        case Operator.LessOrEqual:
        case Operator.GreaterOrEqual:
        case Operator.StartsWith:
        case Operator.Greater:
            {
                Dictionary<string, string> textDict = commandDictionary[op];
                ColValueFilter filter = null;
                var colId = String.Format("%{0}", filter != null ? filter.Column.Id.ToString() : String.Empty);
                var colName = filter != null ? filter.Column.GetDescription() : Resources.SelectColumn;
                var value = filter != null ? filter.Value.ToString() : String.Empty;
                /* value modification */
                value = value.Replace("\\%", "%");
                if (op == Operator.Like)
                {
                    value = value.Remove(value.Length - 1);
                    value = value.Substring(1, value.Length - 1);
                }
                value = value.Replace(@"\", "");
                var text = filter != null ? filter.Value.ToString() : Resources.EnterValue;
                <span class="operator value">
                    <div class="op-symbol">@textDict["Symbol"]</div>@Html.Partial("_TooltipPartial", Resources.GreaterFilter)
                    <span class="op-command">@textDict["OpCommand"]</span>
                    <span class="op-dock column">
                        <span class="op-command column">@colId</span>
                        <span class="dropdown placeholder" placeholder="@Resources.SelectColumn">@colName</span>
                    </span>
                    <span class="op-text">@textDict["Symbol"]</span>
                    <span class="op-dock value">
                        <span class="op-command">,"</span>
                        <span class="op-command value">@value</span>
                        <span><input type="text" value="@text" placeholder="@Resources.EnterValue" class="text placeholder" style="width: @(text.Length*11)px;" /></span>
                        <span class="op-command">"</span>
                    </span>
                    <span class="op-command">)</span>
                    <div class="delete">x</div>
                </span>
            }
            break;
        case Operator.In:
            {
                ColSetFilter Filter = null;
                var ColName = Filter != null ? Filter.Column.GetDescription() : Resources.SelectColumn;
                <span class="operator op_in typeless n-ary">
                    <div class="op-symbol">&isin;</div>@Html.Partial("_TooltipPartial", Resources.InFilter)
                    <span class="op-command">In(</span>
                    <span class="op-dock column">
                        <span class="op-command column">%</span>
                        <span class="dropdown placeholder" placeholder="@Resources.SelectColumn">@ColName</span>
                    </span>
                    <span class="op-text"> @Resources.In { </span>
                    @if (Filter != null)
                    {
                        foreach (var Value in Filter.Values)
                        {
                            <span class="op-dock value">
                                <span class="op-command">,"</span>
                                <span class="op-command value">@Value</span> 
                                <span><input type="text" value="@Value" placeholder="@Resources.EnterValue" class="text placeholder" style="width: @(Value.ToString().Length*11)px;" /></span>
                                <span class="op-command">"</span>
                            </span>
                        }
                    }
                    else
                    {
                        <span class="op-dock value">
                            <span class="op-command">,"</span>
                            <span class="op-command value"></span>
                            <span><input type="text" value="@Resources.EnterValue" placeholder="@Resources.EnterValue" class="text placeholder" style="width: 90px;" /></span>
                            <span class="op-command">"</span>
                        </span>
                    }
                    <span class="op-dock value optional">
                        <span class="op-text">, </span>
                        <span class="op-command">,"</span>
                        <span class="op-command value"></span>
                        <span><input type="text" value="@Resources.EnterValue" placeholder="@Resources.EnterValue" class="text placeholder" style="width: 90px;" /></span>
                        <span class="op-command">"</span>
                    </span>
                    <span class="op-text"> } </span>
                    <span class="op-command">)</span>
                    <div class="delete">x</div>
                </span>
            }
            break;
        case Operator.Between:
            {
                BetweenFilter Filter = null;
                var ColId = String.Format("%{0}", Filter != null ? Filter.Column.Id.ToString() : String.Empty);
                var ColName = Filter != null ? Filter.Column.GetDescription() : Resources.SelectColumn;
                var Field1Value = Filter != null ? Filter.Value1.ToString() : String.Empty;
                var Field1Text = Filter != null ? Filter.Value1.ToString() : Resources.EnterValue;
                var Field2Value = Filter != null ? Filter.Value2.ToString() : String.Empty;
                var Field2Text = Filter != null ? Filter.Value2.ToString() : Resources.EnterValue;
                <span class="operator op_bt value ternary">
                    <div class="op-symbol">&le;&le;</div>@Html.Partial("_TooltipPartial", Resources.BetweenFilter)
                    <span class="op-command">Between(</span>
                    <span class="op-dock value">
                        <span class="op-command">"</span>
                        <span class="op-command value">@Field1Value</span>
                        <span><input type="text" value="@Field1Text" placeholder="@Resources.EnterValue" class="text placeholder" style="width: @(Field1Text.Length*11)px;" /></span>
                        <span class="op-command">"</span>
                    </span>
                    <span class="op-text"> &le; </span>
                    <span class="op-dock column">
                        <span class="op-command">,</span>
                        <span class="op-command column">@ColId</span>
                        <span class="dropdown placeholder" placeholder="@Resources.SelectColumn">@ColName</span>
                    </span>
                    <span class="op-text"> &le; </span>
                    <span class="op-dock value">
                        <span class="op-command">,"</span>
                        <span class="op-command value">@Field2Value</span>
                        <span><input type="text" value="@Field2Text" placeholder="@Resources.EnterValue" class="text placeholder" style="width: @(Field2Text.Length*11)px;" /></span>
                        <span class="op-command">"</span>
                    </span>
                    <span class="op-command">)</span>
                    <div class="delete">x</div>
                </span>
            }
            break;
    }
}
@Html.Raw("</div>");