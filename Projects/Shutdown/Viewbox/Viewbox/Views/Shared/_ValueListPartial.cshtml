@using SystemDb
@using Viewbox.Properties
@using Viewbox;
@model Viewbox.Models.ValueListModels
@{
    bool ascending = ((int)Model.Direction == 0);
    bool descending = ((int)Model.Direction == 1);
    int fullWidth = Model.ValueListCollection.Count > 0 ? (Model.ValueListCollection.Max(v => v.Value.ToString().Length) + Model.ValueListCollection.Max(v => v.Description.ToString().Length) * 9) + 10 : 435;
    int placeHolderWidth = Model.ValueListCollection.Count > 0 ? 
        (20 - Model.ValueListCollection.Max(v => v.Value.ToString().Length) > 0 ? (20 - (Model.ValueListCollection.Max(v => v.Value.ToString().Length))) * 7 + 10 : 10)
        : 10;
    string fullWidthStyle = String.Format("width: {0}px;", fullWidth + placeHolderWidth > 435 ? fullWidth + placeHolderWidth : 435);
}
<div class="search-opt-panel">
    <div class="bg-left">
    </div>
    @using (Html.BeginForm("", "", FormMethod.Get, new { id = "searchFormDistinct" }))
    {
        <input class="bg-middle placeholder" style="width: 380px;" name="search" type="text" id="searchBar"
               value="@(String.IsNullOrEmpty(Model.Search) ? Resources.SearchPhrase : Model.Search)" placeholder="@Resources.SearchPhrase" />
        <input type="submit" class="submit" value="" />
    }
</div>

<div class="exactmatch">
    <a class=@(Model.ExactMatch ? "checkboxon" : "checkboxoff") href="#"></a>
    <span>@Resources.ExactMatch</span>
    @if (Model.ValueListCollection != null && Model.ValueListCollection.Count > 0)
    {
        <input type="button" value="@Resources.AppendAll" id="append-all" style="float: right; display: none;"/>
    }
</div>
<div class="header">
    <input type="hidden" name="paramId" id="paramId" value=@(Model.Parameter.Id) />
    <div class="sort-column">@Resources.DocumentValue</div>
    <div class="distinct-sorting">
        <a class="ascending@(ascending ? " active" : "")" nav="ascending" /><a class="descending@(descending ? " active" : "")" nav="descending" />
    </div>
</div>
<div class="scrollauto report-distinct-menu click">
    @if (Model.ValueListCollection != null && Model.ValueListCollection.Count > 0)
    {

        foreach (var v in Model.ValueListCollection)
        {
            placeHolderWidth = Model.ValueListCollection.Count > 0 ?
                (20 -  v.Value.ToString().Length > 0 ? (20 - v.Value.ToString().Length) * 7 + 10 : 10)
                : 10;
            string placeHolderWidthStyle = String.Format("width: {0}px;", placeHolderWidth);    
            <div class="entry gray-on-mouseover distinct">
                <div class="entry-container" style="@fullWidthStyle">
                    <div class="value @(Model.Parameter != null && (Model.Parameter.DataType == SqlType.Numeric || Model.Parameter.DataType == SqlType.Decimal) && Model.Parameter.TypeModifier == 0 ? "thousand-separator2" : "")">@v.Value.ToString()</div>
                    @if (Model.HasDescription)
                    {
                        <div class="place-holder" style="@(placeHolderWidthStyle) height: 15px; float: left;"></div>
                        <div class="value-description">@Html.Raw(v.Description)</div>
                    }
                </div>

            </div>
        }
    }
    else
    {
        <div>@Resources.NoDataFound</div>
    }
</div>
<div class="navigation">
    <span class="hide" id="value-distinct-page">@Model.Page</span>
    <span class="hide" id="value-distinct-direction">@((int)Model.Direction)</span>
    <span class="hide" id="value-distinct-search">@(Model.Search)</span>
    @if (Model.Page > 0)
    {
        <a class="iconx first" nav="activefirst" />
        <a class="iconx back" nav="activeback" />
    }
    else
    {
        <span class="iconx first"></span>
        <span class="iconx back"></span>
    }
    @if (Model.RowsCount > 0)
    {
        <span title="@String.Format(Resources.WertehilfeMessage, Model.RowsCount.ToString("#,0"))">
            @((Model.FromRow + 1).ToString("#,0"))-@((Model.ToRow > ViewboxApplication.WertehilfeLimit ? ViewboxApplication.WertehilfeLimit : Model.ToRow).ToString("#,0"))
            / @((Model.RowsCount > ViewboxApplication.WertehilfeLimit ? ViewboxApplication.WertehilfeLimit : Model.RowsCount).ToString("#,0"))
        </span>
    }
    @if (Model.ToRow < (ViewboxApplication.WertehilfeLimit > Model.RowsCount ? Model.RowsCount : ViewboxApplication.WertehilfeLimit))
    {
        <a class="iconx next" nav="activenext" />
        <a class="iconx last" nav="activelast" navlast=@(Model.RowsCount < ViewboxApplication.WertehilfeLimit ? (Model.PageCount % ViewboxApplication.WertehilfeSize == 0 ? Model.PageCount -1 : Model.PageCount) : (ViewboxApplication.WertehilfeLimit / ViewboxApplication.WertehilfeSize)) />
    }
    else
    {
        <span class="iconx next"></span>
        <span class="iconx last"></span>
    }
</div>