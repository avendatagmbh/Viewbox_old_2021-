@using SystemDb
@using Viewbox.Models
@using Viewbox.Properties
@using Viewbox
@model Viewbox.Models.ITableObjectList
<div class="tabbar-new overview-tabbar">
    @foreach (var Category in Model.Categories)
    {
        var rightsclass = String.Empty;
        if (Model.RightsMode)
        {
            rightsclass += Category.IsAllowedInRightsMode() ? "readable" : "not-readable";
        }
        if (Category == Model.SelectedCategory)
        {
            <div class="tabheader selected @rightsclass">
                <span class="headercontent">@(Category.GetName() + " (" + Model.Count + ")" )</span>
                <div class="arrow"></div>
                @if (Model.RightsMode)
                {
                    var right = Category.IsAllowedInRightsMode() ? RightType.None : RightType.Read;
                    <a class="right-switch" href="@Url.Action("UpdateCategoryRight", "UserManagement", new
                                                                                   {
                                                                                       id = Category.Id, type = Model.Type, right,
                                                                                       json = true, search = Model.SearchPhrase, page = Model.CurrentPage,
                                                                                       size = Model.PerPage, showEmpty = Model.ShowEmpty, sortColumn = Model.SortColumn,
                                                                                       direction = Model.Direction == null ? ViewboxDb.SortDirection.Ascending : Model.Direction, showHidden = Model.ShowHidden
                                                                                   })"></a>
                    @Html.Partial("_TooltipPartial", ViewboxSession.GetRightInfo(Category.Id, UpdateRightType.Category, Category.IsAllowedInRightsMode()))
                }
            </div>
        }
        else
        {
            var list = new List<ITableObject>();
            if (Model.Type == TableType.Table)
            {
                list.AddRange(from t in ViewboxSession.Tables
                              where t.Category.Id == Category.Id
                                    && t.Database == Model.SelectedSystem
                                    && (Model.SearchPhrase == null
                                        || t.GetDescription().ToLower().Contains(Model.SearchPhrase)
                                        || t.TableName.ToLower().Contains(Model.SearchPhrase)
                                        || t.TransactionNumber.ToString().StartsWith(Model.SearchPhrase))
                                    && t.GetRowCount() > 0
                                    && t.IsVisible
                              orderby t.Ordinal
                              select t);
            }
            if (Model.Type == TableType.View)
            {
                list.AddRange(from v in ViewboxSession.Views
                              where v.Category.Id == Category.Id
                                    && v.Database == Model.SelectedSystem
                                    && (Model.SearchPhrase == null
                                        || v.GetDescription().ToLower().Contains(Model.SearchPhrase)
                                        || v.TableName.ToLower().Contains(Model.SearchPhrase)
                                        || v.TransactionNumber.ToString().StartsWith(Model.SearchPhrase))
                                    && v.GetRowCount() > 0
                                    && v.IsVisible
                              orderby v.Ordinal
                              select v);
            }
            if (Model.Type == TableType.Issue)
            {
                list.AddRange(from i in ViewboxSession.Issues
                              where i.Category.Id == Category.Id
                                    && i.Database == Model.SelectedSystem
                                    && (Model.SearchPhrase == null
                                        || i.GetDescription().ToLower().Contains(Model.SearchPhrase)
                                        || i.TableName.ToLower().Contains(Model.SearchPhrase)
                                        || i.TransactionNumber.ToString().StartsWith(Model.SearchPhrase))
                                    && i.IsVisible
                              orderby i.Ordinal
                              select i);
            }
            var count = list.Count;
            list = null;

            <div class="tabheader @rightsclass">
                <a class="headercontent" href="@Url.Action(null, new {id = Category.Id, sortColumn = Model.SortColumn, direction = Model.Direction, page = 0, size = Model.PerPage, json = true, search = Model.SearchPhrase})">@(Category.GetName() + " (" + count + ")")</a>
                <div class="arrow hide"></div>
                @if (Model.RightsMode)
                {
                    var right = Category.IsAllowedInRightsMode() ? RightType.None : RightType.Read;
                    <a class="right-switch" href="@Url.Action("UpdateCategoryRight", "UserManagement", new
                                                                                   {
                                                                                       id = Category.Id, type = Model.Type, right,
                                                                                       json = true, search = Model.SearchPhrase, page = Model.CurrentPage,
                                                                                       size = Model.PerPage, showEmpty = Model.ShowEmpty, sortColumn = Model.SortColumn,
                                                                                       direction = Model.Direction == null ? ViewboxDb.SortDirection.Ascending : Model.Direction, showHidden = Model.ShowHidden
                                                                                   })"></a>
                    @Html.Partial("_TooltipPartial", ViewboxSession.GetRightInfo(Category.Id, UpdateRightType.Category, Category.IsAllowedInRightsMode()))
                }
            </div>
        }
    }
    @if (Model.Type != TableType.Issue)
    {
        var count = 0;
        if (Model.ShowEmpty)
        {
            count = Model.Count;
        }
        else
        {
            if (Model.Type == TableType.Table)
            {
                var list = (Model as TableList).GetTableList(true);
                count = list.Count;
                list = null;
            }
            if (Model.Type == TableType.View)
            {
                var list = (Model as ViewList).GetViewList(true);
                count = list.Count;
                list = null;
            }
        }
        <div class="tabheader show_empty @(Model.ShowEmpty ? "selected" : "")">
            <span>@String.Format(Resources.EmptyTables, Model.Type == TableType.Table ? Resources.Tables : Resources.Views) (@count)</span>
            <div class="arrow hide"></div>
        </div>
    }
    @{
        var countHidden = 0;
        if (Model.ShowHidden)
        {
            countHidden = Model.Count;
        }
        else
        {
            if (Model.Type == TableType.Issue)
            {
                var list = (Model as IssueList).GetIssueList(true);
                countHidden = list.Count;
                list = null;
            }
            if (Model.Type == TableType.Table)
            {
                var list = (Model as TableList).GetTableList(false, true);
                countHidden = list.Count;
                list = null;
            }
            if (Model.Type == TableType.View)
            {
                var list = (Model as ViewList).GetViewList(false, true);
                countHidden = list.Count;
                list = null;
            }
        }
    }
    @if (ViewboxSession.IsAdmin)
    {
        <div class="tabheader show_hidden @(Model.ShowHidden ? "selected" : "")">
            <span>@String.Format(Resources.HiddenTableObjects, Model.Type == TableType.Table ? Resources.Tables : Model.Type == TableType.View ? Resources.Views : Resources.Issues) (@countHidden)</span>
            <div class="arrow hide"></div>
        </div>
    }
</div>